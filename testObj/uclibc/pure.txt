mainmenu "uClibc C Library Configuration"

choice
	prompt "Target Architecture"
config TARGET_alpha
	bool "alpha"
config TARGET_arm
	bool "arm"
config TARGET_avr32
	bool "avr32"
config TARGET_bfin
	bool "bfin"
config TARGET_cris
	bool "cris"
config TARGET_e1
	bool "e1 (BROKEN)"
config TARGET_frv
	bool "frv (BROKEN)"
config TARGET_h8300
	bool "h8300 (BROKEN)"
config TARGET_hppa
	bool "hppa"
config TARGET_i386
	bool "i386"
config TARGET_i960
	bool "i960 (BROKEN)"
config TARGET_ia64
	bool "ia64"
config TARGET_m68k
	bool "m68k"
config TARGET_microblaze
	bool "microblaze"
config TARGET_mips
	bool "mips"
config TARGET_nios
	bool "nios"
config TARGET_nios2
	bool "nios2"
config TARGET_powerpc
	bool "powerpc"
config TARGET_sh
	bool "superh"
config TARGET_sh64
	bool "sh64"
config TARGET_sparc
	bool "sparc"
config TARGET_v850
	bool "v850 (BROKEN)"
config TARGET_vax
	bool "vax"
config TARGET_x86_64
	bool "x86_64"
config TARGET_xtensa
	bool "xtensa"
config TARGET_c6x
	bool "c6x"
endchoice
menu "Target Architecture Features and Options"
config TARGET_ARCH
	string
	default "x86_64"
config FORCE_OPTIONS_FOR_ARCH
	bool
	default y
	select ARCH_LITTLE_ENDIAN
	select ARCH_HAS_MMU
config TARGET_SUBARCH
	string
	default ""
if !ARCH_USE_MMU
choice
	prompt "Target File Format"
config UCLIBC_FORMAT_ELF
	bool "ELF"
	depends on ARCH_USE_MMU
config UCLIBC_FORMAT_FDPIC_ELF
	bool "FDPIC ELF"
	depends on !ARCH_USE_MMU && (TARGET_bfin || TARGET_frv)
	select DOPIC
config UCLIBC_FORMAT_DSBT_ELF
	bool "DBST ELF"
	depends on !ARCH_USE_MMU && TARGET_c6x
	select DOPIC
config UCLIBC_FORMAT_FLAT
	bool "STATIC FLAT"
	depends on !ARCH_USE_MMU
	select ARCH_HAS_NO_LDSO
config UCLIBC_FORMAT_FLAT_SEP_DATA
	bool "STATIC FLAT (sep-data)"
	depends on !ARCH_USE_MMU
	select ARCH_HAS_NO_LDSO
config UCLIBC_FORMAT_SHARED_FLAT
	bool "SHARED FLAT"
	depends on !ARCH_USE_MMU
	select ARCH_HAS_NO_LDSO
endchoice
endif
if ARCH_USE_MMU
comment "Using ELF file format"
endif
config UCLIBC_SHARED_FLAT_ID
	int "Shared library ID"
	default 1
	depends on UCLIBC_FORMAT_SHARED_FLAT
config ARCH_ANY_ENDIAN
	bool
config ARCH_BIG_ENDIAN
	bool
config ARCH_LITTLE_ENDIAN
	bool
if ARCH_ANY_ENDIAN
choice
	prompt "Target Processor Endianness"
config ARCH_WANTS_BIG_ENDIAN
	bool "Big Endian"
	select ARCH_BIG_ENDIAN
config ARCH_WANTS_LITTLE_ENDIAN
	bool "Little Endian"
	select ARCH_LITTLE_ENDIAN
endchoice
endif


config ARCH_HAS_NO_MMU
	bool
config ARCH_HAS_MMU
	bool "Target CPU has a memory management unit (MMU)"
	depends on !ARCH_HAS_NO_MMU
	default y
config ARCH_USE_MMU
	bool "Do you want to utilize the MMU?"
	depends on ARCH_HAS_MMU
	default y
config UCLIBC_HAS_FLOATS
	bool "Enable floating point number support"
	default y
config UCLIBC_HAS_FPU
	bool "Target CPU has a floating point unit (FPU)"
	default y
config UCLIBC_HAS_SOFT_FLOAT
	bool
	depends on UCLIBC_HAS_FLOATS && !UCLIBC_HAS_FPU
	default y
config DO_C99_MATH
	bool "Enable full C99 math library support"
	depends on UCLIBC_HAS_FLOATS
	default n
config DO_XSI_MATH
	bool "Enable XSI math extensions to the ISO C standard (bessel)"
	depends on UCLIBC_HAS_FLOATS
	default n
config UCLIBC_HAS_FENV
	bool "Enable C99 Floating-point environment"
	depends on UCLIBC_HAS_FLOATS
	default n
config UCLIBC_HAS_LONG_DOUBLE_MATH
	bool "Enable long double support"
	depends on DO_C99_MATH
	depends on TARGET_i386 || TARGET_m68k || TARGET_sparc || TARGET_x86_64 || TARGET_powerpc || TARGET_sh || TARGET_microblaze
	default y
config KERNEL_HEADERS
	string "Linux kernel header location"
	default "/usr/include"
config UCLIBC_UCLINUX_BROKEN_MUNMAP
	bool
	depends on !ARCH_USE_MMU
	default y
config HAVE_DOT_CONFIG
	bool
	default y
endmenu
menu "General Library Settings"
config HAVE_NO_PIC
	bool
config DOPIC
	bool "Generate only Position Independent Code (PIC)"
	default y
	depends on !HAVE_NO_PIC
config ARCH_HAS_NO_SHARED
	bool
config ARCH_HAS_NO_LDSO
	bool
	select ARCH_HAS_NO_SHARED
config HAVE_SHARED
	bool "Enable shared libraries"
	depends on !ARCH_HAS_NO_SHARED
	default y
config FORCE_SHAREABLE_TEXT_SEGMENTS
	bool "Only load shared libraries which can share their text segment"
	depends on HAVE_SHARED
	select DOPIC
config LDSO_LDD_SUPPORT
	bool "Native 'ldd' support"
	depends on HAVE_SHARED
	default y
config LDSO_CACHE_SUPPORT
	bool "Enable library loader cache (ld.so.conf)"
	depends on HAVE_SHARED
	default y
config LDSO_PRELOAD_ENV_SUPPORT
	bool "Enable library loader LD_PRELOAD environment"
	depends on HAVE_SHARED
	default y
config LDSO_PRELOAD_FILE_SUPPORT
	bool "Enable library loader preload file (ld.so.preload)"
	depends on HAVE_SHARED
config LDSO_BASE_FILENAME
	string "Shared library loader naming prefix"
	depends on HAVE_SHARED && (LDSO_CACHE_SUPPORT || LDSO_PRELOAD_FILE_SUPPORT)
	default "ld.so"
config LDSO_STANDALONE_SUPPORT
	bool "Dynamic linker stand-alone mode support"
	depends on HAVE_SHARED
config LDSO_PRELINK_SUPPORT
	bool "Dynamic linker prelink support"
	depends on HAVE_SHARED
	select LDSO_STANDALONE_SUPPORT
config UCLIBC_STATIC_LDCONFIG
	bool "Link ldconfig statically"
	depends on HAVE_SHARED
	default y
config LDSO_RUNPATH
	bool "Enable ELF RUNPATH tag support"
	depends on HAVE_SHARED
	default y if LDSO_CACHE_SUPPORT
config LDSO_SEARCH_INTERP_PATH
	bool "Add ldso path to lib search path"
	depends on HAVE_SHARED
	default y
config LDSO_LD_LIBRARY_PATH
	bool "Add LD_LIBRARY_PATH to lib search path"
	depends on HAVE_SHARED
	default y
config LDSO_NO_CLEANUP
	bool "Disable automatic unloading of dynamically loaded shared objects"
	depends on HAVE_SHARED
	default n
config UCLIBC_CTOR_DTOR
	bool "Support global constructors and destructors"
	default y
config LDSO_GNU_HASH_SUPPORT
	bool "Enable GNU hash style support"
	depends on HAVE_SHARED
choice
	prompt "Thread support"
	default HAS_NO_THREADS
config HAS_NO_THREADS
	bool "none"
config LINUXTHREADS_OLD
	bool "older (stable) version of linuxthreads"
	select UCLIBC_HAS_REALTIME
config LINUXTHREADS_NEW
	bool "slightly newer version of linuxthreads"
config UCLIBC_HAS_THREADS_NATIVE
	bool "Native POSIX Threading (NPTL)"
	select UCLIBC_HAS_TLS
	select UCLIBC_HAS_STDIO_FUTEXES
	depends on !TARGET_i386
endchoice
config UCLIBC_HAS_THREADS
	def_bool y if !HAS_NO_THREADS
config UCLIBC_HAS_TLS
	bool "Thread-Local Storage"
	depends on UCLIBC_HAS_THREADS_NATIVE
config PTHREADS_DEBUG_SUPPORT
	bool "Build pthreads debugging support"
	depends on UCLIBC_HAS_THREADS
config UCLIBC_HAS_SYSLOG
	bool "Syslog support"
	default y
	depends on UCLIBC_HAS_NETWORK_SUPPORT
	select UCLIBC_HAS_SOCKET
config UCLIBC_HAS_LFS
	bool "Large File Support"
	default y
choice
	prompt "Malloc Implementation"
	default MALLOC if ! ARCH_USE_MMU
	default MALLOC_STANDARD if ARCH_USE_MMU
config MALLOC
	bool "malloc"
config MALLOC_SIMPLE
	bool "malloc-simple"
config MALLOC_STANDARD
	bool "malloc-standard"
	depends on ARCH_USE_MMU
endchoice
config MALLOC_GLIBC_COMPAT
	bool "Malloc returns live pointer for malloc(0)"
config UCLIBC_DYNAMIC_ATEXIT
	bool "Dynamic atexit() Support"
	default y
config COMPAT_ATEXIT
	bool "Old (visible) atexit Support"
config UCLIBC_SUSV3_LEGACY
	bool "Enable SuSv3 LEGACY functions"
config UCLIBC_SUSV3_LEGACY_MACROS
	bool "Enable SuSv3 LEGACY macros"
config UCLIBC_SUSV4_LEGACY
	bool "Enable SuSv4 LEGACY or obsolescent functions"
config UCLIBC_STRICT_HEADERS
	bool "Enable structures and constants for unsupported features"
config UCLIBC_HAS_STUBS
	bool "Provide stubs for unavailable functionality"
config UCLIBC_HAS_SHADOW
	bool "Shadow Password Support"
	default y
config UCLIBC_HAS_PROGRAM_INVOCATION_NAME
	bool "Support for program_invocation_name"
config UCLIBC_HAS___PROGNAME
	bool "Support for __progname"
	default y
	depends on UCLIBC_HAS_PROGRAM_INVOCATION_NAME
config UCLIBC_HAS_PTY
	bool
	default y
config ASSUME_DEVPTS
	bool "Assume that /dev/pts is a devpts or devfs file system"
	default y
	depends on UCLIBC_HAS_PTY
config UNIX98PTY_ONLY
	bool
	default y
	depends on UCLIBC_HAS_PTY

config UCLIBC_HAS_GETPT
	bool "Support getpt() (glibc-compat)"
	depends on UCLIBC_HAS_PTY


config UCLIBC_HAS_LIBUTIL
	bool "Provide libutil library and functions"
	depends on UCLIBC_HAS_PTY
config UCLIBC_HAS_TM_EXTENSIONS
	bool "Support 'struct tm' timezone extension fields"
	default y
config UCLIBC_HAS_TZ_CACHING
	bool "Enable caching of the last valid timezone 'TZ' string"
	default y
config UCLIBC_HAS_TZ_FILE
	bool "Enable '/etc/TZ' file support to set a default timezone (uClibc-specific)"
	default y
config UCLIBC_HAS_TZ_FILE_READ_MANY
	bool "Repeatedly read the '/etc/TZ' file"
	depends on UCLIBC_HAS_TZ_FILE
	default y
config UCLIBC_TZ_FILE_PATH
	string "Path to the 'TZ' file for setting the global timezone"
	depends on UCLIBC_HAS_TZ_FILE
	default "/etc/TZ"
config UCLIBC_FALLBACK_TO_ETC_LOCALTIME
	bool "Use /etc/localtime as a fallback"
	depends on UCLIBC_HAS_TZ_FILE
	default y
endmenu
menu "Advanced Library Settings"
config UCLIBC_PWD_BUFFER_SIZE
	int "Buffer size for getpwnam() and friends"
	default 256
	range 12 1024
config UCLIBC_GRP_BUFFER_SIZE
	int "Buffer size for getgrnam() and friends"
	default 256
	range 12 1024
config UCLIBC_LINUX_MODULE_26
	bool "Linux kernel module functions (2.6)"
	default y
config UCLIBC_LINUX_MODULE_24
	bool "Linux kernel module functions (<2.6)"
	depends on !TARGET_bfin && !TARGET_c6x
config UCLIBC_LINUX_SPECIFIC
	bool "Linux specific functions"
	default y
config UCLIBC_HAS_GNU_ERROR
	bool "Support GNU extensions for error-reporting"
	default y
config UCLIBC_BSD_SPECIFIC
	bool "BSD specific functions"
	default y
config UCLIBC_HAS_BSD_ERR
	bool "BSD err functions"
	default y
config UCLIBC_HAS_OBSOLETE_BSD_SIGNAL
	bool "BSD obsolete signal functions"
config UCLIBC_HAS_OBSOLETE_SYSV_SIGNAL
	bool "SYSV obsolete signal functions"
config UCLIBC_NTP_LEGACY
	bool "ntp_*() aliases"
config UCLIBC_SV4_DEPRECATED
	bool "Enable SVr4 deprecated functions"
config UCLIBC_HAS_REALTIME
	bool "Realtime-related family of SUSv functions"
	default y
config UCLIBC_HAS_ADVANCED_REALTIME
	bool "Advanced realtime-related family of SUSv functions"
	default y
	depends on UCLIBC_HAS_REALTIME
config UCLIBC_HAS_EPOLL
	bool "epoll"
	default y
config UCLIBC_HAS_XATTR
	bool "Extended Attributes"
	default y
config UCLIBC_HAS_PROFILING
	bool "Profiling support"
	default y
config UCLIBC_HAS_CRYPT_IMPL
	bool "libcrypt support"
	default y
config UCLIBC_HAS_SHA256_CRYPT_IMPL
	bool "libcrypt SHA256 support"
	depends on UCLIBC_HAS_CRYPT_IMPL
config UCLIBC_HAS_SHA512_CRYPT_IMPL
	bool "libcrypt SHA512 support"
	depends on UCLIBC_HAS_CRYPT_IMPL
config UCLIBC_HAS_CRYPT_STUB
	bool "libcrypt stubs"
	default y
	depends on !UCLIBC_HAS_CRYPT_IMPL
config UCLIBC_HAS_CRYPT
	def_bool y
	depends on UCLIBC_HAS_CRYPT_IMPL || UCLIBC_HAS_CRYPT_STUB
endmenu
menuconfig UCLIBC_HAS_NETWORK_SUPPORT
	bool "Networking Support"
	default y
if UCLIBC_HAS_NETWORK_SUPPORT
config UCLIBC_HAS_SOCKET
	bool "Socket support"
	default y
config UCLIBC_HAS_IPV4
	bool "IP version 4 support"
	default y
	select UCLIBC_HAS_SOCKET
config UCLIBC_HAS_IPV6
	bool "IP version 6 support"
	select UCLIBC_HAS_SOCKET
config UCLIBC_HAS_RPC
	bool "Remote Procedure Call (RPC) support"
	depends on UCLIBC_HAS_IPV4 || UCLIBC_HAS_IPV6
config UCLIBC_HAS_FULL_RPC
	bool "Full RPC support"
	depends on UCLIBC_HAS_RPC
	default y if !HAVE_SHARED
config UCLIBC_HAS_REENTRANT_RPC
	bool "Reentrant RPC support"
	depends on UCLIBC_HAS_RPC
	default y if !HAVE_SHARED
config UCLIBC_USE_NETLINK
	bool "Use netlink to query interfaces"
	depends on UCLIBC_HAS_SOCKET
config UCLIBC_SUPPORT_AI_ADDRCONFIG
	bool "Support the AI_ADDRCONFIG flag"
	depends on UCLIBC_USE_NETLINK
config UCLIBC_HAS_BSD_RES_CLOSE
	bool "Support res_close() (bsd-compat)"
config UCLIBC_HAS_COMPAT_RES_STATE
	bool "Use compatible but bloated _res"
	default y
config UCLIBC_HAS_EXTRA_COMPAT_RES_STATE
	bool "Use extra compatible but extra bloated _res"
config UCLIBC_HAS_RESOLVER_SUPPORT
	bool "DNS resolver functions"
	select UCLIBC_HAS_COMPAT_RES_STATE
	depends on UCLIBC_HAS_IPV4 || UCLIBC_HAS_IPV6
config UCLIBC_HAS_LIBRESOLV_STUB
	bool "Provide libresolv stub"
config UCLIBC_HAS_LIBNSL_STUB
	bool "Provide libnsl stub"
endif
menu "String and Stdio Support"
config UCLIBC_HAS_STRING_GENERIC_OPT
	bool "Use faster (but larger) generic string functions"
	default y
config UCLIBC_HAS_STRING_ARCH_OPT
	bool "Use arch-specific assembly string functions (where available)"
	default y
config UCLIBC_HAS_CTYPE_TABLES
	bool "Use Table Versions Of 'ctype.h' Functions."
	default y
config UCLIBC_HAS_CTYPE_SIGNED
	bool "Support Signed Characters In 'ctype.h' Functions."
	depends on UCLIBC_HAS_CTYPE_TABLES
	default y
choice
	prompt "ctype argument checking"
	depends on UCLIBC_HAS_CTYPE_TABLES
	default UCLIBC_HAS_CTYPE_UNSAFE
config UCLIBC_HAS_CTYPE_UNSAFE
	bool "Do not check -- unsafe"
config UCLIBC_HAS_CTYPE_CHECKED
	bool "Detect and handle appropriately"
config UCLIBC_HAS_CTYPE_ENFORCED
	bool "Issue a diagnostic and abort()"
endchoice
config UCLIBC_HAS_WCHAR
	bool "Wide Character Support"
config UCLIBC_HAS_LOCALE
	bool "Locale Support"
	select UCLIBC_HAS_WCHAR
	select UCLIBC_HAS_CTYPE_TABLES
choice
prompt "Locale data"
	depends on UCLIBC_HAS_LOCALE
	default UCLIBC_BUILD_ALL_LOCALE
config UCLIBC_BUILD_ALL_LOCALE
	bool "All locales"
	depends on UCLIBC_HAS_LOCALE
config UCLIBC_BUILD_MINIMAL_LOCALE
	bool "Only selected locales"
	depends on UCLIBC_HAS_LOCALE
config UCLIBC_PREGENERATED_LOCALE_DATA
	bool "Use Pre-generated Locale Data"
	depends on UCLIBC_HAS_LOCALE
endchoice
config UCLIBC_BUILD_MINIMAL_LOCALES
	string "locales to use"
	depends on UCLIBC_BUILD_MINIMAL_LOCALE
	default "en_US"
config UCLIBC_DOWNLOAD_PREGENERATED_LOCALE_DATA
	bool "Automagically Download the Pre-generated Locale Data (if necessary)"
	depends on UCLIBC_PREGENERATED_LOCALE_DATA
config UCLIBC_HAS_XLOCALE
	bool "Extended Locale Support (experimental/incomplete)"
	depends on UCLIBC_HAS_LOCALE
config UCLIBC_HAS_HEXADECIMAL_FLOATS
	bool "Support hexadecimal float notation"
	depends on UCLIBC_HAS_CTYPE_TABLES
	depends on UCLIBC_HAS_FLOATS
config UCLIBC_HAS_GLIBC_DIGIT_GROUPING
	bool "Support glibc's \"'\" flag for allowing locale-specific digit grouping"
	depends on UCLIBC_HAS_LOCALE
	depends on UCLIBC_HAS_FLOATS
config UCLIBC_HAS_SCANF_LENIENT_DIGIT_GROUPING
	bool "Do not require digit grouping when the \"'\" flag is specified"
	depends on UCLIBC_HAS_GLIBC_DIGIT_GROUPING
	default y
config UCLIBC_HAS_GLIBC_CUSTOM_PRINTF
	bool "Support glibc's register_printf_function() (glibc-compat)"
	depends on !USE_OLD_VFPRINTF
config USE_OLD_VFPRINTF
	bool "Use the old vfprintf implementation"
	depends on !UCLIBC_HAS_WCHAR
config UCLIBC_PRINTF_SCANF_POSITIONAL_ARGS
	int "Maximum number of positional args.  Either 0 or >= 9."
	depends on !USE_OLD_VFPRINTF
	default 9
config UCLIBC_HAS_SCANF_GLIBC_A_FLAG
	bool "Support glibc's 'a' flag for scanf string conversions (not implemented)"
choice
	prompt "Stdio buffer size"
	default UCLIBC_HAS_STDIO_BUFSIZ_4096
config UCLIBC_HAS_STDIO_BUFSIZ_NONE
	bool "none (WARNING - BUFSIZ will be 256 in stdio.h)"
	depends on !UCLIBC_HAS_WCHAR
config UCLIBC_HAS_STDIO_BUFSIZ_256
	bool "256 (minimum ANSI/ISO C99 value)"
config UCLIBC_HAS_STDIO_BUFSIZ_512
	bool "512"
config UCLIBC_HAS_STDIO_BUFSIZ_1024
	bool "1024"
config UCLIBC_HAS_STDIO_BUFSIZ_2048
	bool "2048"
config UCLIBC_HAS_STDIO_BUFSIZ_4096
	bool "4096"
config UCLIBC_HAS_STDIO_BUFSIZ_8192
	bool "8192"
endchoice
choice
	prompt "Stdio builtin buffer size (uClibc-specific)"
	depends on !UCLIBC_HAS_STDIO_BUFSIZ_NONE
	default UCLIBC_HAS_STDIO_BUILTIN_BUFFER_NONE
config UCLIBC_HAS_STDIO_BUILTIN_BUFFER_NONE
	bool "None"
config UCLIBC_HAS_STDIO_BUILTIN_BUFFER_4
	bool "4"
config UCLIBC_HAS_STDIO_BUILTIN_BUFFER_8
	bool "8"
endchoice
config UCLIBC_HAS_STDIO_SHUTDOWN_ON_ABORT
	bool "Attempt to shutdown stdio subsystem when abort() is called."
config UCLIBC_HAS_STDIO_GETC_MACRO
	bool "Provide a macro version of getc()"
	depends on !UCLIBC_HAS_STDIO_BUFSIZ_NONE
	default y
config UCLIBC_HAS_STDIO_PUTC_MACRO
	bool "Provide a macro version of putc()"
	depends on !UCLIBC_HAS_STDIO_BUFSIZ_NONE
	default y
config UCLIBC_HAS_STDIO_AUTO_RW_TRANSITION
	bool "Support auto-r/w transition"
	default y
config UCLIBC_HAS_FOPEN_LARGEFILE_MODE
	bool "Support an fopen() 'F' flag for large file mode (uClibc-specific)"
	depends on UCLIBC_HAS_LFS
config UCLIBC_HAS_FOPEN_EXCLUSIVE_MODE
	bool "Support an fopen() 'x' flag for exclusive mode (glibc-compat)"
config UCLIBC_HAS_FOPEN_CLOSEEXEC_MODE
	bool "Support an fopen() 'e' flag for close-on-exec mode (glibc-compat)"
config UCLIBC_HAS_GLIBC_CUSTOM_STREAMS
	bool "Support fmemopen(), open_memstream(), and fopencookie() (glibc-compat)"
config UCLIBC_HAS_PRINTF_M_SPEC
	bool "Support the '%m' specifier in printf format strings (glibc-compat)"
config UCLIBC_HAS_ERRNO_MESSAGES
	bool "Include the errno message text in the library"
	default y
config UCLIBC_HAS_SYS_ERRLIST
	bool "Support sys_errlist[] (obsolete-compat)"
	depends on UCLIBC_HAS_ERRNO_MESSAGES
config UCLIBC_HAS_SIGNUM_MESSAGES
	bool "Include the signum message text in the library"
	default y
config UCLIBC_HAS_SYS_SIGLIST
	bool "Support sys_siglist[] (bsd-compat)"
	depends on UCLIBC_HAS_SIGNUM_MESSAGES
config UCLIBC_HAS_GETTEXT_AWARENESS
	bool "Include gettext awareness"
	depends on UCLIBC_HAS_LOCALE && UCLIBC_MJN3_ONLY
config UCLIBC_HAS_GNU_GETOPT
	bool "Support gnu getopt"
	default y
config UCLIBC_HAS_STDIO_FUTEXES
	bool "Use futexes for multithreaded I/O locking"
	depends on UCLIBC_HAS_THREADS_NATIVE
config UCLIBC_HAS_GETOPT_LONG
	bool "Support getopt_long/getopt_long_only"
	depends on !UCLIBC_HAS_GNU_GETOPT
	default y
config UCLIBC_HAS_GNU_GETSUBOPT
	bool "Support glibc getsubopt"
	default y
endmenu
menu "Big and Tall"
config UCLIBC_HAS_REGEX
	bool "Regular Expression Support"
	default y
config UCLIBC_HAS_REGEX_OLD
	bool "Use the older (stable) regular expression code"
	depends on UCLIBC_HAS_REGEX
	default y
config UCLIBC_HAS_FNMATCH
	bool "fnmatch Support"
	default y
config UCLIBC_HAS_FNMATCH_OLD
	bool "Use the older (stable) fnmatch code"
	depends on UCLIBC_HAS_FNMATCH
	default y
config UCLIBC_HAS_WORDEXP
	bool "Support the wordexp() interface"
	depends on UCLIBC_HAS_GLOB
config UCLIBC_HAS_NFTW
	bool "Support the nftw() interface"
config UCLIBC_HAS_FTW
	bool "Support the ftw() interface (SUSv4-obsolete)"
	depends on UCLIBC_SUSV4_LEGACY
config UCLIBC_HAS_FTS
	bool "Support the fts() interface (bsd-compat)"
config UCLIBC_HAS_GLOB
	bool "Support the glob() interface"
	depends on UCLIBC_HAS_FNMATCH
	default y
config UCLIBC_HAS_GNU_GLOB
	bool "Support gnu glob() interface"
	depends on UCLIBC_HAS_GLOB
config UCLIBC_HAS_UTMPX
       bool "utmpx based support for tracking login/logouts to/from the system"
endmenu
menu "Library Installation Options"
config RUNTIME_PREFIX
	string "uClibc runtime library directory"
	default "/usr/x86_64-linux-uclibc/"
config DEVEL_PREFIX
	string "uClibc development environment directory"
	default "/usr/x86_64-linux-uclibc/usr/"
config MULTILIB_DIR
	string "library path component"
	default "lib"
config HARDWIRED_ABSPATH
	bool "Hardwire absolute paths into linker scripts"
	default y
endmenu
menu "Security options"
config UCLIBC_BUILD_PIE
	bool "Build utilities as ET_DYN/PIE executables"
	depends on HAVE_SHARED
	depends on TARGET_arm || TARGET_frv || TARGET_i386 || TARGET_mips || TARGET_powerpc
	select FORCE_SHAREABLE_TEXT_SEGMENTS
config UCLIBC_HAS_ARC4RANDOM
	bool "Include the arc4random() function"
config HAVE_NO_SSP
	bool
config UCLIBC_HAS_SSP
	bool "Support for GCC stack smashing protector"
	depends on !HAVE_NO_SSP
config UCLIBC_HAS_SSP_COMPAT
	bool "Support for gcc-3.x propolice smashing stack protector"
	depends on UCLIBC_HAS_SSP
config SSP_QUICK_CANARY
	bool "Use simple guard values without accessing /dev/urandom"
	depends on UCLIBC_HAS_SSP
choice
	prompt "Propolice protection blocking signal"
	depends on UCLIBC_HAS_SSP
	default PROPOLICE_BLOCK_ABRT if ! DODEBUG
	default PROPOLICE_BLOCK_SEGV if DODEBUG
config PROPOLICE_BLOCK_ABRT
	bool "abort"
config PROPOLICE_BLOCK_SEGV
	bool "segfault"
endchoice
config UCLIBC_BUILD_SSP
	bool "Build uClibc with -fstack-protector"
	depends on UCLIBC_HAS_SSP
config UCLIBC_BUILD_RELRO
	bool "Build uClibc with linker option -z RELRO"
	depends on HAVE_SHARED
	default y
config UCLIBC_BUILD_NOW
	bool "Build uClibc with linker option -z NOW"
	depends on HAVE_SHARED
config UCLIBC_BUILD_NOEXECSTACK
	bool "Build uClibc with noexecstack marking"
	default y
endmenu
menu "Development/debugging options"
config CROSS_COMPILER_PREFIX
	string "Cross-compiling toolchain prefix"
	default ""
config UCLIBC_EXTRA_CFLAGS
	string "Extra CFLAGS"
	default ""
config DODEBUG
	bool "Enable debugging symbols"
	select EXTRA_WARNINGS
config DODEBUG_PT
	bool "Build pthread with debugging output"
	depends on UCLIBC_HAS_THREADS && LINUXTHREADS_OLD
config DOSTRIP
	bool "Strip libraries and executables"
	default y
	depends on !DODEBUG
config DOASSERTS
	bool "Build with run-time assertion testing"
config SUPPORT_LD_DEBUG
	bool "Build the shared library loader with debugging support"
	depends on HAVE_SHARED
config SUPPORT_LD_DEBUG_EARLY
	bool "Build the shared library loader with early debugging support"
	depends on HAVE_SHARED
config UCLIBC_MALLOC_DEBUGGING
	bool "Build malloc with debugging support"
	depends on MALLOC || MALLOC_STANDARD
config UCLIBC_HAS_BACKTRACE
	bool "Add support for application self-debugging"
	depends on HAVE_SHARED
config WARNINGS
	string "Compiler Warnings"
	default "-Wall"
config EXTRA_WARNINGS
	bool "Enable extra annoying warnings"
config DOMULTI
	bool "Compile all sources at once into an object"
config UCLIBC_MJN3_ONLY
	bool "Manuel's hidden warnings"
endmenu
