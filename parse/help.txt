	help
	  Append an extra string to the end of the coreboot version.
	  This can be useful if, for instance, you want to append the
	  respective board's hostname or some other identifying string to
	  the coreboot version number, so that you can easily distinguish
	  boot logs of different boards from each other.
	help
	  Select the prefix to all files put into the image. It's "fallback"
	  by default, "normal" is a common alternative.
	help
	 Use common wrapper to interface CBFS to SPI bootrom.
	help
	  Account for the firmware image containing more than one CBFS
	  instance. Locations of instances are known at build time and are
	  communicated between coreboot stages to make sure the next stage is
	  loaded from the appropriate instance.
	help
	  This option allows you to select the compiler used for building
	  coreboot.
	  You must build the coreboot crosscompiler for the board that you
	  have selected.
	  To build all the GCC crosscompilers (takes a LONG time), run:
	    make crossgcc
	  For help on individual architectures, run the command:
	    make help_toolchain
	help
	  Use the GNU Compiler Collection (GCC) to build coreboot.
	  For details see http://gcc.gnu.org.
	help
	  Use LLVM/clang to build coreboot.  To use this, you must build the
	  coreboot version of the clang compiler.  Run the command
	    make clang
	  Note that this option is not currently working correctly and should
	  really only be selected if you're trying to work on getting clang
	  operational.
	  For details see http://clang.llvm.org.
	help
	  Many toolchains break when building coreboot since it uses quite
	  unusual linker features. Unless developers explicitely request it,
	  we'll have to assume that they use their distro compiler by mistake.
	  Make sure that using patched compilers is a conscious decision.
	help
	  Enables the use of ccache for faster builds.
	  Requires the ccache utility in your system $PATH.
	  For details see https://ccache.samba.org.
	help
	  Enable this option if you are working on the flashmap descriptor
	  parser and made changes to fmd_scanner.l or fmd_parser.y.
	  Otherwise, say N to use the provided pregenerated scanner/parser.
	help
	  Enable this option if you are working on the sconfig device tree
	  parser and made changes to sconfig.l or sconfig.y.
	  Otherwise, say N to use the provided pregenerated scanner/parser.
	help
	  Enable this option if coreboot shall read options from the "CMOS"
	  NVRAM instead of using hard-coded values.
	help
	  Enable this option to reset "CMOS" NVRAM values to default on
	  every boot.  Use this if you want the NVRAM configuration to
	  never be modified from its default values.
	help
	  Compress ramstage to save memory in the flash image. Note
	  that decompression might slow down booting if the boot flash
	  is connected through a slow link (i.e. SPI).
	help
	  Compress romstage and (if it exists) verstage with LZ4 to save flash
	  space and speed up boot, since the time for reading the image from SPI
	  (and in the vboot case verifying it) is usually much greater than the
	  time spent decompressing. Doesn't work for XIP stages (assume all
	  ARCH_X86 for now) for obvious reasons.
	help
	  Include the .config file that was used to compile coreboot
	  in the (CBFS) ROM image. This is useful if you want to know which
	  options were used to build a specific coreboot.rom image.
	  Saying Y here will increase the image size by 2-3KB.
	  You can use the following command to easily list the options:
	    grep -a CONFIG_ coreboot.rom
	  Alternatively, you can also use cbfstool to print the image
	  contents (including the raw 'config' item we're looking for).
	  Example:
	    $ cbfstool coreboot.rom print
	    coreboot.rom: 4096 kB, bootblocksize 1008, romsize 4194304,
	                                               offset 0x0
	    Alignment: 64 bytes
	    Name                           Offset     Type         Size
	    cmos_layout.bin                0x0        cmos layout  1159
	    fallback/romstage              0x4c0      stage        339756
	    fallback/ramstage              0x53440    stage        186664
	    fallback/payload               0x80dc0    payload      51526
	    config                         0x8d740    raw          3324
	    (empty)                        0x8e480    null         3610440
	help
	  Make coreboot create a table of timer-ID/timer-value pairs to
	  allow measuring time spent at different phases of the boot process.
	help
	  This draws in the blobs repository, which contains binary files that
	  might be required for some chipsets or boards.
	  This flag ensures that a "Free" option remains available for users.
	help
	  Add code coverage support for coreboot. This will store code
	  coverage information in CBMEM for extraction from user space.
	  If unsure, say N.
	help
	 If RELOCATABLE_MODULES is selected then support is enabled for
	 building relocatable modules in the RAM stage. Those modules can be
	 loaded anywhere and all the relocations are handled automatically.
	help
	 The reloctable ramstage support allows for the ramstage to be built
	 as a relocatable module. The stage loader can identify a place
	 out of the OS way so that copying memory is unnecessary during an S3
	 wake. When selecting this option the romstage is responsible for
	 determing a stack location to use for loading the ramstage.
	help
	 The relocated ramstage is saved in an area specified by the
	 by the board and/or chipset.
	help
	  Offset of flash map in firmware image
	help
	  Do not clear the reboot count immediately after successful boot.
	  Set to allow the payload to control normal/fallback image recovery.
	  Note that it is the responsibility of the payload to reset the
	  normal boot bit to 1 after each successsful boot.
	help
	  If this option is enabled, no new coreboot.rom file
	  is created. Instead it is expected that there already
	  is a suitable file for further processing.
	  The bootblock will not be modified.
	  If unsure, select 'N'
	help
	  If enabled, compile the generic GPIO library. A "generic" GPIO
	  implies configurability usually found on SoCs, particularly the
	  ability to control internal pull resistors.
	help
	  Mainboards that can read a board ID from the hardware straps
	  (ie. GPIO) select this configuration option.
	help
	  If you want to maintain a board ID, but the hardware does not
	  have straps to automatically determine the ID, you can say Y
	  here and add a file named 'board_id' to CBFS. If you don't know
	  what this is about, say N.
	help
	  This string is placed in the 'board_id' CBFS file for indicating
	  board type.
	help
	  If enabled, coreboot discovers RAM configuration (value obtained by
	  reading board straps) and stores it in coreboot table.
	help
	  Select this option if you have a bootsplash image that you would
	  like to add to your ROM.
	  This will only add the image to the ROM. To actually run it check
	  options under 'Display' section.
	help
	  The path and filename of the file to use as graphical bootsplash
	  screen. The file format has to be jpg.
	help
	  Use acpi sata port generator.
	help
	  Select the size of the ROM chip you intend to flash coreboot on.
	  The build system will take care of creating a coreboot.rom file
	  of the matching size.
	help
	  Choose this option if you have a 64 KB ROM chip.
	help
	  Choose this option if you have a 128 KB ROM chip.
	help
	  Choose this option if you have a 256 KB ROM chip.
	help
	  Choose this option if you have a 512 KB ROM chip.
	help
	  Choose this option if you have a 1024 KB (1 MB) ROM chip.
	help
	  Choose this option if you have a 2048 KB (2 MB) ROM chip.
	help
	  Choose this option if you have a 4096 KB (4 MB) ROM chip.
	help
	  Choose this option if you have a 8192 KB (8 MB) ROM chip.
	help
	  Choose this option if you have a 12288 KB (12 MB) ROM chip.
	help
	  Choose this option if you have a 16384 KB (16 MB) ROM chip.
	help
	  The selected mainboard can optionally have the power button tied
	  to ground with a jumper so that the button appears to be
	  constantly depressed. If this option is enabled and the jumper is
	  installed then the board will turn on, but turn off again after a
	  short timeout, usually 4 seconds.
	  Select Y here if you have removed the jumper and want to use an
	  actual power button. Select N if you have the jumper installed.
	help
	  This is the part of the ROM actually managed by CBFS, located at the
	  end of the ROM (passed through cbfstool -o) on x86 and at at the start
	  of the ROM (passed through cbfstool -s) everywhere else. It defaults
	  to span the whole ROM on all but Intel systems that use an Intel Firmware
	  Descriptor.  It can be overridden to make coreboot live alongside other
	  components like ChromeOS's vboot/FMAP or Intel's IFD / ME / TXE
	  binaries.
	help
	  The build system creates a default FMAP from ROM_SIZE and CBFS_SIZE,
	  but in some cases more complex setups are required.
	  When an fmd is specified, it overrides the default format.
	help
	  If this option is selected, every file in cbfs which has a constraint
	  regarding position or alignment will get an additional file attribute
	  which describes this constraint.
	help
	  Intel Apollolake support
	help
	  The size of the cache-as-ram region required during bootblock
	  and/or romstage.
	help
	  The amount of anticipated stack usage in CAR by bootblock and
	  other stages.
	help
	  The base address (in CAR) where romstage should be linked
	help
	  Bay Trail I part support using the Intel FSP.
	help
	  This is set by the FSP
	help
	  This is the default PCI ID for the Bay Trail graphics
	  devices.  This string names the vbios ROM in cbfs.
	help
	  The Baytrail SOC has one legacy serial port. Choose this option to
	  configure the pads and enable it. This serial port can be used for
	  the debug console.
	help
	  Enabling this option will activate graphics init code. With this init,
	  the graphic power gate registers will be initialized before
	  VBIOS is executed.
	help
	  The path and filename of the Intel FSP binary for this platform.
	help
	  The location in CBFS that the FSP is located. This must match the
	  value that is set in the FSP binary.  If the FSP needs to be moved,
	  rebase the FSP with Intel's BCT (tool).
	  The Bay Trail FSP is built with a preferred base address of
	  0xFFFC0000.
	help
	  Bay Trail M/D part support.
	help
	  Select this option to add a blob containing
	  memory reference code.
	  Note: Without this binary coreboot will not work
	help
	  The path and filename of the file to use as System Agent
	  binary. Note that this points to the sandybridge binary file
	  which is will not work, but it serves its purpose to do builds.
	help
	  The size of the cache-as-ram region required during bootblock
	  and/or romstage. Note DCACHE_RAM_SIZE and DCACHE_RAM_MRC_VAR_SIZE
	  must add up to a power of 2.
	help
	  The amount of cache-as-ram region required by the reference code.
	help
	  The amount of anticipated stack usage from the data cache
	  during pre-RAM ROM stage execution.
	help
	  The baytrail romstage code caches the loaded ramstage program
	  in SMM space. On S3 wake the romstage will copy over a fresh
	  ramstage that was cached in the SMM space. This option determines
	  the action to take when the ramstage cache is invalid. If selected
	  the system will reset otherwise the ramstage will be reloaded from
	  cbfs.
	help
	  The PMC has a legacy COM1 serial port. Choose this option to
	  configure the pads and enable it. This serial port can be used for
	  the debug console.
	help
	 The reference code blob will be placed into cbfs.
	help
	 The path and filename to the file to be added to cbfs.
	help
	  Intel Skylake support
	help
	  The size of the cache-as-ram region required during bootblock
	  and/or romstage.
	help
	  If you set this option to n, will not use native SD controller.
	help
	  Provide a monotonic timer using the 24MHz MSR counter.
	help
	  On some systems, coreboot boots so fast that connected monitors
	  (mostly TVs) won't be able to wake up fast enough to talk to the
	  VBIOS. On those systems we need to wait for a bit before executing
	  the VBIOS.
	help
	  If you set this option to y, the serial IRQ machine will be
	  operated in continuous mode.
	help
	  Include DSP firmware settings for 2 channel DMIC array.
	help
	  Include DSP firmware settings for 4 channel DMIC array.
	help
	  Include DSP firmware settings for nau88l25 headset codec.
	help
	  Include DSP firmware settings for max98357 amplifier.
	help
	  Include DSP firmware settings for ssm4567 smart amplifier.
	help
	  Skip Cache as RAM setup in FSP.
	help
	  Intel Quark support
	help
	  The Quark SoC has two HSUART. Choose this option to configure the pads
	  and enable HSUART1, which can be used for the debug console.
	help
	  Memory mapped MMIO of HSUART1.
	help
	  Enable the use of the SD LED for early debugging before serial output
	  is available.  Setting this LED indicates that control has reached the
	  desired check point.
	help
	  Indicate that ESRAM has been successfully initialized.
	help
	  Indicate that fsp.bin was found.
	help
	  Indicate that TempRamInit was successful.
	help
	  Specify the size of the coreboot file system in the read-only (recovery)
	  portion of the flash part.  On Quark systems the firmware image stores
	  more than just coreboot, including:
	   - The chipset microcode (RMU) binary file located at 0xFFF00000
	   - Intel Trusted Execution Engine firmware
	help
	  Select this option to add an Intel FSP binary to
	  the resulting coreboot image.
	  Note: Without this binary, coreboot builds relying on the FSP
	  will not boot
	help
	  The path and filename of the Intel FSP binary for this platform.
	help
	  8 ASCII character byte signature string that will help match the FSP
	  binary to a supported hardware configuration.
	help
	  The location in CBFS that the FSP is located. This must match the
	  value that is set in the FSP binary.  If the FSP needs to be moved,
	  rebase the FSP with Intel's BCT (tool).
	help
	  The location in ESRAM where a copy of the FSP binary is placed.
	help
	  Relocate the FSP binary into DRAM before the call to SiliconInit.
	help
	  The PDAT file is required for the FSP 1.1 binary
	help
	  The path and filename of the Intel Galileo platform-data-patch (PDAT)
	  binary. This binary file is generated by the platform-data-patch.py
	  script released with the Quark BSP and contains the Ethernet address.
	help
	  The location in CBFS that the PDAT is located. It must match the
	  PCD PcdPlatformDataBaseAddress of Quark SoC FSP.
	help
	  The RMU file is required to get the chip out of reset.
	help
	  The path and filename of the Intel Quark RMU binary.
	help
	  The location in CBFS that the RMU is located. It must match the
	  strap-determined base address.
	help
	  Braswell M/D part support.
	help
	  The size of the cache-as-ram region required during bootblock
	  and/or romstage. Note DCACHE_RAM_SIZE and DCACHE_RAM_MRC_VAR_SIZE
	  must add up to a power of 2.
	help
	  The amount of anticipated stack usage from the data cache
	  during pre-ram rom stage execution.
	help
	  The haswell romstage code caches the loaded ramstage program
	  in SMM space. On S3 wake the romstage will copy over a fresh
	  ramstage that was cached in the SMM space. This option determines
	  the action to take when the ramstage cache is invalid. If selected
	  the system will reset otherwise the ramstage will be reloaded from
	  cbfs.
	help
	  The PMC has a legacy COM1 serial port. Choose this option to
	  configure the pads and enable it. This serial port can be used for
	  the debug console.
	help
	  common code for Intel SOCs
	help
	  The SoC needs uses different access methods for reading and writing
	  the MTRRs.  Use SoC specific routines to handle the MTRR access.
	help
	  Set this option to y to enable MMA (Memory Margin Analysis) support
	help
	  Broadwell-DE support using the Intel FSP.
	help
	  Use Broadwell-DE Integrated UART ports @3F8h and 2F8h.
	help
	  Select to choose SuperIO's serial port for console output.
	  CANNOT select if intend to use SoC integrated serial ports.
	help
	  The path and filename of the Intel FSP binary for this platform.
	help
	  The location in CBFS that the FSP is located. This must match the
	  value that is set in the FSP binary.  If the FSP needs to be moved,
	  rebase the FSP with Intel's BCT (tool).
	  The Broadwell-DE FSP is built with a preferred base address of
	  0xffeb0000.
	help
	  Load SPD data from ROM instead of trying to read from SMBus.
	  If the platform has DIMM sockets, say N. If memory is down, say Y and
	  supply the appropriate SPD data for each Channel/DIMM.
	help
	  Select Y if Channel 0, DIMM 0 is present.
	help
	  Path to the file which contains the SPD data for Channel 0, DIMM 0.
	help
	  Select Y if Channel 0, DIMM 1 is present.
	help
	  Path to the file which contains the SPD data for Channel 0, DIMM 1.
	help
	  Select Y if Channel 1, DIMM 0 is present.
	help
	  Path to the file which contains the SPD data for Channel 1, DIMM 0.
	help
	  Select Y if Channel 1, DIMM 1 is present.
	help
	  Path to the file which contains the SPD data for Channel 1, DIMM 1.
	help
	  Enable Intel(r) Hyper-Threading Technology for the Broadwell-DE SoC.
	help
	  Intel Broadwell and Haswell ULT support.
	help
	  The size of the cache-as-ram region required during bootblock
	  and/or romstage. Note DCACHE_RAM_SIZE and DCACHE_RAM_MRC_VAR_SIZE
	  must add up to a power of 2.
	help
	  The amount of cache-as-ram region required by the reference code.
	help
	  The amount of anticipated stack usage from the data cache
	  during pre-ram rom stage execution.
	help
	  Select this option to add a Memory Reference Code binary to
	  the resulting coreboot image.
	  Note: Without this binary coreboot will not work
	help
	  The filename of the file to use as Memory Reference Code binary.
	help
	  On some systems, coreboot boots so fast that connected monitors
	  (mostly TVs) won't be able to wake up fast enough to talk to the
	  VBIOS. On those systems we need to wait for a bit before executing
	  the VBIOS.
	help
	  The romstage code caches the loaded ramstage program in SMM space.
	  On S3 wake the romstage will copy over a fresh ramstage that was
	  cached in the SMM space. This option determines the action to take
	  when the ramstage cache is invalid. If selected the system will
	  reset otherwise the ramstage will be reloaded from cbfs.
	help
	  If you set this option to y, the serial IRQ machine will be
	  operated in continuous mode.
	help
	 The reference code blob will be placed into cbfs.
	help
	 The path and filename to the file to be added to cbfs.
	help
	  This option enables additional DRAM related debug messages.
	help
	  This option enables I2C related debug message.
	help
	  This option enables PMIC related debug message.
	help
	  This option enables PMIC WRAP related debug message.
	help
	  Warning: M0 expects that auto self-refresh is enabled. Modify
	  with caution.
	help
	  CPU/SoC-specific bootblock code. This is useful if the
	  bootblock must load microcode or copy data from ROM before
	  searching for the bootblock.
	help
	  Initialize dsi display
	help
	  Initialize dp display
	help
	  Serial console on UART A.
	help
	  Serial console on UART B.
	help
	  Serial console on UART C.
	help
	  Serial console on UART D.
	help
	  Serial console on UART E.
	help
	  Map the UART names to the respective MMIO addres.
	help
	  Use during Foster LPDDR4 bringup.
	help
	  Size of Trust Zone area in MiB to reserve in memory map.
	help
	  Maximum size of Translation Table Buffer in MiB.
	help
	  Maximum size of resident EL3 components in MiB including BL31 and
	  Secure OS.
	help
	  Select this option to add emc training firmware
	help
	  The filename of the mtc firmware
	help
	  Path to directory where MTC firmware file is located.
	help
	  The DRAM location where MTC firmware to be loaded in. This location
	  needs to be consistent with the location defined in tegra_mtc.ld
	help
	  Initialize dsi display
	help
	  Initialize dp display
	help
	  Path to directory where MTS microcode files are located.
	help
	  Size of Trust Zone area in MiB to reserve in memory map.
	help
	  Use during Ryu LPDDR3 bringup
	help
	  The path and filename of the binary blob containing
	  ipq806x early initialization code, as supplied by the
	  vendor.
	help
	  Select this option if you have an AMD Geode GX2 vsa that you would
	  like to add to your ROM.
	  You will be able to specify the location and file name of the
	  image later.
	help
	  The path and filename of the file to use as VSA.
	help
	  Select this option if you have an AMD Geode LX vsa that you would
	  like to add to your ROM.
	  You will be able to specify the location and file name of the
	  image later.
	help
	  The path and filename of the file to use as VSA.
	help
	  Overwride the default write through caching size as 1M Bytes.
	  On some AMD platforms, one socket supports 2 or more kinds of
	  processor family, compiling several CPU families agesa code
	  will increase the romstage size.
	  In order to execute romstage in place on the flash ROM,
	  more space is required to be set as write through caching.
	help
	  This Option allows you to redirect the AMD AGESA IDS_HDT_CONSOLE debug information to the serial console.
	  Warning: Only enable this option when debuging or tracing AMD AGESA code.
	help
	  AMD G34 Socket
	help
	  AMD C32 Socket
	help
	  AMD AM3r2 Socket
	help
	  This Option allows you to redirect the AMD AGESA IDS_HDT_CONSOLE debug information to the serial console.
	  Warning: Only enable this option when debuging or tracing AMD AGESA code.
	help
		Force AGESA to ignore package type mismatch between CPU and northbridge
		in memory code. This enables Socket AM1 support with current AGESA
		version for Kabini platform.
		Enable this option only if you have Socket AM1 board.
		Note that the AGESA release shipped with coreboot does not officially
		support the AM1 socket. Selecting this option might damage your hardware.
	help
	  Overwride the default write through caching size as 1M Bytes.
	  On some AMD platforms, one socket supports 2 or more kinds of
	  processor family, compiling several CPU families agesa code
	  will increase the romstage size.
	  In order to execute romstage in place on the flash ROM,
	  more space is required to be set as write through caching.
	help
	  The haswell romstage code caches the loaded ramstage program
	  in SMM space. On S3 wake the romstage will copy over a fresh
	  ramstage that was cached in the SMM space. This option determines
	  the action to take when the ramstage cache is invalid. If selected
	  the system will reset otherwise the ramstage will be reloaded from
	  cbfs.
	help
	  This option selects building a Firmware Interface Table (FIT).
	help
	  This option selects the number of empty entries in the FIT table.
	help
	  This option indicates that the turbo mode setting is not package
	  scoped. i.e. enable_turbo() needs to be called on not just the bsp
	help
	 This option uses common MP infrastructure for bringing up APs
	 in parallel. It additionally provides a more flexible mechanism
	 for sequencing the steps of bringing up the APs.
	help
	  Expose monotonic time using the local apic.
	help
	  This option asserts that the TSC ticks at a known constant rate.
	  Therefore, no TSC calibration is required.
	help
	  Expose monotonic time using the TSC.
	help
	  The CPU driver should select this if the CPU needs
	  to execute an lfence instruction in order to synchronize
	  rdtsc. This is true for all modern AMD CPUs.
	help
	  The CPU driver should select this if the CPU needs
	  to execute an mfence instruction in order to synchronize
	  rdtsc. This is true for all modern Intel CPUs.
	help
	  This option determines the size of the heap within the SMM handler
	  modules.
	help
	  On some CPUs, there is a race condition in SMM.
	  This can occur when both hyperthreads change SMM state
	  variables in parallel without coordination.
	  Setting this option serializes the SMM initialization
	  to avoid an ugly hang in the boot process at the cost
	  of a slightly longer boot time.
	help
	  This option informs the MTRR code to use the RdMem and WrMem fields
	  in the fixed MTRR MSRs.
	help
	  Selected for Intel processors/platform combinations that use the
	  Intel Firmware Support Package (FSP) 1.0 for initialization.
	help
	 The CPU support will select this option if the default SMM region
	 needs to be backed up for suspend/resume purposes.
	help
	  On certain platforms a boot speed gain can be realized if mirroring
	  the payload data stored in non-volatile storage. On x86 systems the
	  payload would typically live in a memory-mapped SPI part. Copying
	  the SPI contents to RAM before performing the load can speed up
	  the boot process.
	help
	 Most x86 systems which boot from SPI flash boot using bus 0.
	help
	  This option is used to enable certain functions to make coreboot
	  work correctly on symmetric multi processor (SMP) systems.
	help
	  This must equal address of ap_sipi_vector from bootblock build.
	help
	  Select MMX in your socket or model Kconfig if your CPU has MMX
	  streaming SIMD instructions. ROMCC can build more efficient
	  code if it can spill to MMX registers.
	help
	  Select SSE in your socket or model Kconfig if your CPU has SSE
	  streaming SIMD instructions. ROMCC can build more efficient
	  code if it can spill to SSE (aka XMM) registers.
	help
	  Select SSE2 in your socket or model Kconfig if your CPU has SSE2
	  streaming SIMD instructions. Some parts of coreboot can be built
	  with more efficient code if SSE2 instructions are available.
	help
	  This is selected by a board or chipset to set the default for the
	  microcode source choice to a list of external microcode headers
	help
	  Select this option if you want microcode updates to be assembled when
	  building coreboot and included in the final image as a separate CBFS
	  file. Microcode will not be hard-coded into ramstage.
	  The microcode file may be removed from the ROM image at a later
	  time with cbfstool, if desired.
	  If unsure, select this option.
	help
	  Select this option if you want to include external c header files
	  containing the CPU microcode. This will be included as a separate
	  file in CBFS.
	  A word of caution: only select this option if you are sure the
	  microcode that you have is newer than the microcode shipping with
	  coreboot.
	  The microcode file may be removed from the ROM image at a later
	  time with cbfstool, if desired.
	  If unsure, select "Generate from tree"
	help
	  Select this option if you do not want CPU microcode included in CBFS.
	  Note that for some CPUs, the microcode is hard-coded into the source
	  tree and is not loaded from CBFS. In this case, microcode will still
	  be updated. There is a push to move all microcode to CBFS, but this
	  change is not implemented for all CPUs.
	  This option currently applies to:
	    - Intel SandyBridge/IvyBridge
	    - VIA Nano
	  Microcode may be added to the ROM image at a later time with cbfstool,
	  if desired.
	  If unsure, select "Generate from tree"
	  The GOOD:
	  Microcode updates intend to solve issues that have been discovered
	  after CPU production. The expected effect is that systems work as
	  intended with the updated microcode, but we have also seen cases where
	  issues were solved by not applying microcode updates.
	  The BAD:
	  Note that some operating system include these same microcode patches,
	  so you may need to also disable microcode updates in your operating
	  system for this option to have an effect.
	  The UGLY:
	  A word of CAUTION: some CPUs depend on microcode updates to function
	  correctly. Not updating the microcode may leave the CPU operating at
	  less than optimal performance, or may cause outright hangups.
	  There are CPUs where coreboot cannot properly initialize the CPU
	  without microcode updates
	  For example, if running with the factory microcode, some Intel
	  SandyBridge CPUs may hang when enabling CAR, or some VIA Nano CPUs
	  will hang when changing the frequency.
	  Make sure you have a way of flashing the ROM externally before
	  selecting this option.
	help
	  Select this option to install separate microcode container files into
	  CBFS instead of using the traditional monolithic microcode file format.
	help
	  A list of one or more microcode header files with path from the
	  coreboot directory.  These should be separated by spaces.
comment "Northbridge"
	help
	  Select this for boards with a Voltage Regulator able to operate
	  at 3.4 MHz in SVI mode. Ignored unless the AMD CPU is rev C3.
	help
	  This option sets the maximum permissible HyperTransport
	  downlink width.
	  Use of this option will only limit the autodetected HT width.
	  It will not (and cannot) increase the width beyond the autodetected
	  limits.
	  This is primarily used to work around poorly designed or laid out HT
	  traces on certain motherboards.
	help
	  This option sets the maximum permissible HyperTransport
	  uplink width.
	  Use of this option will only limit the autodetected HT width.
	  It will not (and cannot) increase the width beyond the autodetected
	  limits.
	  This is primarily used to work around poorly designed or laid out HT
	  traces on certain motherboards.
	help
	  The default VGA BIOS PCI vendor/device ID should be set to the
	  result of the map_oprom_vendev() function in northbridge.c.
	help
	  The default VGA BIOS PCI vendor/device ID should be set to the
	  result of the map_oprom_vendev() function in northbridge.c.
	help
	  The default VGA BIOS PCI vendor/device ID should be set to the
	  result of the map_oprom_vendev() function in northbridge.c.
	help
	  The default VGA BIOS PCI vendor/device ID should be set to the
	  result of the map_oprom_vendev() function in northbridge.c.
	help
	  This Option allows you to redirect the AMD Northbridge CIMX
	  Trace debug information to the serial console.
	  Warning: Only enable this option when debuging or tracing AMD CIMX code.
	help
	  Set the TSEG area to 1 MB.
	help
	  Set the TSEG area to 2 MB.
	help
	  Set the TSEG area to 4 MB.
	help
	  Set the TSEG area to 8 MB.
	help
	  The path and filename of the Intel FSP binary for this platform.
	help
	  The location in CBFS that the FSP is located. This must match the
	  value that is set in the FSP binary.  If the FSP needs to be moved,
	  rebase the FSP with Intel's BCT (tool).
	  The Rangeley FSP is built with a preferred base address of 0xFFF80000
	help
	  The size of the cache-as-ram region required during bootblock
	  and/or romstage. Note DCACHE_RAM_SIZE and DCACHE_RAM_MRC_VAR_SIZE
	  must add up to a power of 2.
	help
	  The amount of cache-as-ram region required by the reference code.
	help
	  The amount of anticipated stack usage from the data cache
	  during pre-ram rom stage execution.
	help
	  Select this option to add a System Agent binary to
	  the resulting coreboot image.
	  Note: Without this binary coreboot will not work
	help
	  The path and filename of the file to use as System Agent
	  binary.
	help
	  On some systems, coreboot boots so fast that connected monitors
	  (mostly TVs) won't be able to wake up fast enough to talk to the
	  VBIOS. On those systems we need to wait for a bit before executing
	  the VBIOS.
	help
	  Select if you want to use coreboot implementation of raminit rather than
	  System Agent/MRC.bin. You should answer Y.
	help
	  The path and filename of the file to use as System Agent
	  binary.
	help
	  This is the default PCI ID for the sandybridge/ivybridge graphics
	  devices.  This string names the vbios ROM in cbfs.  The following
	  PCI IDs will be remapped to load this ROM:
	  0x80860102, 0x8086010a, 0x80860112, 0x80860116
	  0x80860122, 0x80860126, 0x80860166
	help
	  The path and filename of the Intel FSP binary for this platform.
	help
	  The location in CBFS that the FSP is located. This must match the
	  value that is set in the FSP binary.  If the FSP needs to be moved,
	  rebase the FSP with the Intel's BCT (tool).
	  The Ivy Bridge Processor/Panther Point FSP is built with a preferred
	  base address of 0xFFF80000
	help
	  This option affects how the SDRAMC register is programmed.
	  Memory clock signals will not be routed properly if this option
	  is set wrong.
	  If your board has 4 DIMM slots, you must use select this option, in
	  your Kconfig file of the board. On boards with 3 DIMM slots,
	  do _not_ select this option.
	help
	  Usually system firmware turns off system memory clock
	  signals to unused SO-DIMM slots to reduce EMI and power
	  consumption.
	  However, some boards do not like unused clock signals to
	  be disabled.
	help
	  If non-zero, this designates the maximum DDR frequency
	  the board supports, despite what the chipset should be
	  capable of.
	help
	  On some boards it may be neccessary to hard reset early
	  during resume from S3 if the SLFRCS register indicates that
	  a memory channel is not guaranteed to be in self-refresh.
	  On other boards the check always creates a false positive,
	  effectively making it impossible to resume.
	help
	  Select the mode in which SATA should be driven. IDE or AHCI.
	  The default is IDE.
	help
	  The XHCI controller must be enabled and the XHCI firmware
	  must be added in order to have USB 3.0 support configured
	  by coreboot. The OS will be responsible for enabling the XHCI
	  controller if the the XHCI firmware is available but the
	  XHCI controller is not enabled by coreboot.
	help
	  Add Hudson 2/3/4 XHCI Firmware to support the onboard USB 3.0
	help
	  Add Hudson 2/3/4 IMC Firmware to support the onboard fan control
	help
	  Add Hudson 2/3/4 GEC Firmware to support the onboard gigabit Ethernet MAC.
	  Must be connected to a Broadcom B50610 or B50610M PHY on the motherboard.
	help
	  Hudson requires the firmware MUST be located at
	  a specific address (ROM start address + 0x20000), otherwise
	  xhci host Controller can not find or load the xhci firmware.
	  The firmware start address is dependent on the ROM chip size.
	  The default offset is 0x20000 from the ROM start address, namely
	  0xFFF20000 if flash chip size is 1M
	  0xFFE20000 if flash chip size is 2M
	  0xFFC20000 if flash chip size is 4M
	  0xFF820000 if flash chip size is 8M
	  0xFF020000 if flash chip size is 16M
	help
	  Select the mode in which SATA should be driven. NATIVE AHCI, or RAID.
	  The default is NATIVE.
	  0: NATIVE mode does not require a ROM.
	  1: RAID mode must have the two ROM files.
	  2: AHCI may work with or without AHCI ROM. It depends on the payload support.
	     For example, seabios does not require the AHCI ROM.
	  3: LEGACY IDE
	  4: IDE to AHCI
	  5: AHCI7804: ROM Required, and AMD driver required in the OS.
	  6: IDE to AHCI7804: ROM Required, and AMD driver required in the OS.
comment "NATIVE"
	depends on HUDSON_SATA_MODE = 0
comment "RAID"
	depends on HUDSON_SATA_MODE = 1
comment "AHCI"
	depends on HUDSON_SATA_MODE = 2
comment "LEGACY IDE"
	depends on HUDSON_SATA_MODE = 3
comment "IDE to AHCI"
	depends on HUDSON_SATA_MODE = 4
comment "AHCI7804"
	depends on HUDSON_SATA_MODE = 5
comment "IDE to AHCI7804"
	depends on HUDSON_SATA_MODE = 6
	help
	  1022,7802 for SATA NON-RAID5 module, 1022,7803 for SATA RAID5 mode
	help
	  The RAID ROM requires that the MISC ROM is located between the range
	  0xFFF0_0000 to 0xFFF0_FFFF. Also, it must 1K bytes aligned.
	  The CONFIG_ROM_SIZE must be larger than 0x100000.
	help
	  Select y if there is no keyboard controller in the system.
	  This sets variables in AGESA and ACPI.
	help
	  bit 1,0 - pin 0
	  bit 3,2 - pin 1
	  bit 5,4 - pin 2
	  bit 7,6 - pin 3
	help
	  There are two UART controllers in Kern.
	  The UART registers are memory-mapped. UART
	  controller 0 registers range from FEDC_6000h
	  to FEDC_6FFFh. UART controller 1 registers
	  range from FEDC_8000h to FEDC_8FFFh.
	help
	  Select to enable PCI-E MMCONFIG support on the SR5650.
	help
	  The XHCI controller must be enabled and the XHCI firmware
	  must be added in order to have USB 3.0 support configured
	  by coreboot. The OS will be responsible for enabling the XHCI
	  controller if the the XHCI firmware is available but the
	  XHCI controller is not enabled by coreboot.
	help
	  Add Hudson 2/3/4 XHCI Firmware to support the onboard USB 3.0
	help
	  Add Hudson 2/3/4 IMC Firmware to support the onboard fan control
	help
	  Add Hudson 2/3/4 GEC Firmware to support the onboard gigabit Ethernet MAC.
	  Must be connected to a Broadcom B50610 or B50610M PHY on the motherboard.
	help
	  Hudson requires the firmware MUST be located at
	  a specific address (ROM start address + 0x20000), otherwise
	  xhci host Controller can not find or load the xhci firmware.
	  The firmware start address is dependent on the ROM chip size.
	  The default offset is 0x20000 from the ROM start address, namely
	  0xFFF20000 if flash chip size is 1M
	  0xFFE20000 if flash chip size is 2M
	  0xFFC20000 if flash chip size is 4M
	  0xFF820000 if flash chip size is 8M
	  0xFF020000 if flash chip size is 16M
	help
	  Select the mode in which SATA should be driven. NATIVE AHCI, or RAID.
	  The default is NATIVE.
	  0: NATIVE mode does not require a ROM.
	  1: RAID mode must have the two ROM files.
	  2: AHCI may work with or without AHCI ROM. It depends on the payload support.
	     For example, seabios does not require the AHCI ROM.
	  3: LEGACY IDE
	  4: IDE to AHCI
	  5: AHCI7804: ROM Required, and AMD driver required in the OS.
	  6: IDE to AHCI7804: ROM Required, and AMD driver required in the OS.
comment "NATIVE"
	depends on HUDSON_SATA_MODE = 0
comment "RAID"
	depends on HUDSON_SATA_MODE = 1
comment "AHCI"
	depends on HUDSON_SATA_MODE = 2
comment "LEGACY IDE"
	depends on HUDSON_SATA_MODE = 3
comment "IDE to AHCI"
	depends on HUDSON_SATA_MODE = 4
comment "AHCI7804"
	depends on HUDSON_SATA_MODE = 5
comment "IDE to AHCI7804"
	depends on HUDSON_SATA_MODE = 6
	help
	  1022,7802 for SATA NON-RAID5 module, 1022,7803 for SATA RAID5 mode
	help
	  The RAID ROM requires that the MISC ROM is located between the range
	  0xFFF0_0000 to 0xFFF0_FFFF. Also, it must 1K bytes aligned.
	  The CONFIG_ROM_SIZE must be larger than 0x100000.
	help
	  Select y if there is no keyboard controller in the system.
	  This sets variables in AGESA and ACPI.
		help
		  bit 1,0 - pin 0
		  bit 3,2 - pin 1
		  bit 5,4 - pin 2
		  bit 7,6 - pin 3
	help
	  Select if RS690 should be setup to support MMCONF.
	help
		0x0 = Native IDE mode.
		0x1 = RAID mode.
		0x2 = AHCI mode.
		0x3 = Legacy IDE mode.
		0x4 = IDE->AHCI mode.
		0x5 = AHCI mode as 7804 ID (AMD driver).
		0x6 = IDE->AHCI mode as 7804 ID (AMD driver).
	help
		n = Disable PCI Bridge Device 14 Function 4.
		y = Enable PCI Bridge Device 14 Function 4.
	help
		Set SCI IRQ to 9.
	help
	  This Option allows you to redirect the AMD Southbridge CIMX Trace
	  debug information to the serial console.
	  Warning: Only enable this option when debuging or tracing AMD CIMX code.
	help
	  If Combined Mode is enabled. IDE controller is exposed and
	  SATA controller has control over Port0 through Port3,
	  IDE controller has control over Port4 and Port5.
	  If Combined Mode is disabled, IDE controller is hidden and
	  SATA controller has full control of all 6 Ports when operating in non-IDE mode.
	help
	  Select the mode in which SATA should be driven. NATIVE AHCI, or RAID.
	  The default is AHCI.
	help
	  NATIVE does not require a ROM.
	help
	  AHCI is the default and may work with or without AHCI ROM. It depends on the payload support.
	  For example, seabios does not require the AHCI ROM.
	help
	  sb800 RAID mode must have the two required ROM files.
	help
	  1002,4392 for SATA NON-RAID5 module, 1002,4393 for SATA RAID5 mode
	help
	  The RAID ROM requires that the MISC ROM is located between the range
	  0xFFF0_0000 to 0xFFF0_FFFF. Also, it must 1K bytes aligned.
	  The CONFIG_ROM_SIZE must larger than 0x100000.
	help
	  Add SB800 / Hudson 1 IMC Firmware to support the onboard fan control.
	help
	  The IMC and GEC ROMs requires a 'signature' located at one of several
	  fixed locations in memory.  The location used shouldn't matter, just
	  select an area that doesn't conflict with anything else.
	help
	  The IMC and GEC ROMs requires a 'signature' located at one of several
	  fixed locations in memory.  The location used shouldn't matter, just
	  select an area that doesn't conflict with anything else.
	help
	  The IMC and GEC ROMs requires a 'signature' located at one of several
	  fixed locations in memory.  The location used shouldn't matter, just
	  select an area that doesn't conflict with anything else.
	help
	  The IMC and GEC ROMs requires a 'signature' located at one of several
	  fixed locations in memory.  The location used shouldn't matter, just
	  select an area that doesn't conflict with anything else.
	help
	  The IMC and GEC ROMs requires a 'signature' located at one of several
	  fixed locations in memory.  The location used shouldn't matter, just
	  select an area that doesn't conflict with anything else.
	help
	  Select the method of SB800 fan control to be used.  None would be
	  for either fixed maximum speed fans connected to the SB800 or for
	  an external chip controlling the fan speeds.  Manual control sets
	  up the SB800 fan control registers.  IMC fan control uses the SB800
	  IMC to actively control the fan speeds.
	help
	  No SB800 Fan control - Do not set up the SB800 fan control registers.
	help
	  Configure the SB800 fan control registers in devicetree.cb.
	help
	  Set up the SB800 to use the IMC based Fan controller.  This requires
	  the IMC rom from AMD.  Configure the registers in devicetree.cb.
	help
	  0x0 = Native IDE mode.
	  0x1 = RAID mode.
	  0x2 = AHCI mode.
	  0x3 = Legacy IDE mode.
	  0x4 = IDE->AHCI mode.
	  0x5 = AHCI mode as 7804 ID (AMD driver).
	  0x6 = IDE->AHCI mode as 7804 ID (AMD driver).
	help
	  n = Disable PCI Bridge Device 14 Function 4.
	  y = Enable PCI Bridge Device 14 Function 4.
	help
	  Set SCI IRQ to 9.
	help
	  If you set this option to y, the serial IRQ machine will be
	  operated in continuous mode.
	help
	  If the flash ROM shall be protected against write accesses from the
	  operating system (OS), the locking procedure has to be repeated after
	  each resume from S3. Select this if you never want to update the flash
	  ROM from within your OS. Notice: Even with this option, the write lock
	  has still to be enabled on the normal boot path (e.g. by the payload).
	help
	  If the flash ROM shall be protected against all accesses from the
	  operating system (OS), the locking procedure has to be repeated after
	  each resume from S3. Select this if you never want to update the flash
	  ROM from within your OS. Notice: Even with this option, the lock
	  has still to be enabled on the normal boot path (e.g. by the payload).
	help
	  If you set this option to y, the serial IRQ machine will be
	  operated in continuous mode.
	help
	  The path and filename to the descriptor.bin file.
	help
	  If you set this option to y, the serial IRQ machine will be
	  operated in continuous mode.
	help
	  Select this option to add a CMC state machine binary to
	  the resulting coreboot image.
	  Note: Without this binary coreboot will not work
	help
	  The path and filename of the file to use as CMC state machine
	  binary.
	help
	  If you set this option to y, the serial IRQ machine will be
	  operated in continuous mode.
	help
	  If you set this option to y, the serial IRQ machine will be
	  operated in continuous mode.
	help
	  Set this option to y for Lynxpont LP (Haswell ULT).
	help
	  If you set this option to y, the serial IRQ machine will be
	  operated in continuous mode.
	help
	  If you set this option to y, the Management Engine driver
	  will defer waiting for the MBP Cleared indicator until the
	  finalize step.  This can speed up boot time if the ME takes
	  a long time to indicate this status.
	help
	  If you set this option to y, the USB ports will be routed
	  to the XHCI controller during the finalize SMM callback.
	help
	ACPI Embedded Controller interface. Mostly found in laptops.
	help
	  Kontron uses an ITE IT8516E on the KTQM77. Its firmware might
	  come from Fintek (mentioned as Finte*c* somewhere in their Linux
	  driver).
	  The KTQM77 is an embedded board and the IT8516E seems to be
	  only used for fan control and GPIO.
	help
	Shared memory mailbox interface to SMSC MEC1308 Embedded Controller.
	help
	Interface to COMPAL ENE932 Embedded Controller.
	help
	Interface to QUANTA IT8518 Embedded Controller.
	help
	Interface to QUANTA ENE KB3940Q Embedded Controller.
	help
	  Google's Chrome EC
	help
	  When defined, ACPI accesses EC memmap data on ports 66h/62h. When
	  not defined, the memmap data is instead accessed on 900h-9ffh via
	  the LPC bus.
	help
	  Google's Chrome EC via I2C bus.
	help
	  Use only proto3 for i2c EC communication.
	help
	  Google Chrome EC via LPC bus.
	help
	  Microchip EC variant for LPC register access.
	help
	  Indicates that Google's Chrome USB PD chip is present.
	help
	  Google's Chrome EC via SPI bus.
	help
	  Force delay after asserting /CS to allow EC to wakeup.
	help
	  Disable building EC firmware if it's already built externally (and
	  added manually.)
	help
	  The board name used in the Chrome EC code base to build
	  the EC firmware.  If set, the coreboot build with also
	  build the EC firmware and add it to the image.
	help
	  The board name used in the Chrome EC code base to build
	  the PD firmware.  If set, the coreboot build with also
	  build the EC firmware and add it to the image.
	help
	  Purism Librem EC
	help
	  Select this option to add an Intel FSP binary to
	  the resulting coreboot image.
	  Note: Without this binary, coreboot builds relying on the FSP
	  will not boot
	help
	  The path and filename of the Intel FSP binary for this platform.
	help
	  The location in CBFS that the FSP is located. This must match the
	  value that is set in the FSP binary.  If the FSP needs to be moved,
	  rebase the FSP with Intel's BCT (tool).
	help
	  Enabling this feature will force the MRC data to be cached in NV
	  storage to be used for speeding up boot time on future reboots
	  and/or power cycles.
	help
	  Enabling this feature will cause MRC data to be cached in NV storage.
	  This can either be used for fast boot, or just because the FSP wants
	  it to be saved.
	help
	  Use the region "RW_MRC_CACHE" in FMAP instead of "mrc.cache" in CBFS.
	  You must define a region in your FMAP named "RW_MRC_CACHE".
	help
	  This is the amount of space in NV storage that is reserved for the
	  fast boot data cache storage.
	  WARNING: Because this area will be erased and re-written, the size
	  should be a full sector of the flash ROM chip and nothing else should
	  be included in CBFS in any sector that the fast boot cache data is in.
	help
	  This is used to calculate the offset of the MRC data cache in NV
	  Storage for fast boot.  If in doubt, leave this set to the default
	  which sets the virtual size equal to the ROM size.
	  Example: Cougar Canyon 2 has two 8 MB SPI ROMs.  When the SPI ROMs are
	  loaded with a 4 MB coreboot image, the virtual ROM size is 8 MB.  When
	  the SPI ROMs are loaded with an 8 MB coreboot image, the virtual ROM
	  size is 16 MB.
	help
	  This is the size of the cachable area that is passed into the FSP in
	  the early initialization.  Typically this should be the size of the CBFS
	  area, but the size must be a power of 2 whereas the CBFS size does not
	  have this limitation.
	help
	  The chipset can select this to use a generic cache_as_ram.inc file
	  that should be good for all FSP based platforms.
	help
	  If this FSP uses UPD/VPD data regions, select this in the chipset Kconfig.
	help
	  Chipset uses the Intel Firmware Descriptor to describe the
	  layout of the SPI ROM chip.
	help
	  The descriptor binary
	help
	  Set SPI frequency to 20MHz and disable Dual Output Fast Read Support
	help
	  The Intel processor in the selected system requires a special firmware
	  for an integrated controller.  This might be called the Management
	  Engine (ME), the Trusted Execution Engine (TXE) or something else
	  depending on the chip. This firmware might or might not be available
	  in coreboot's 3rdparty/blobs repository. If it is not and if you don't
	  have access to the firmware from elsewhere, you can still build
	  coreboot without it. In this case however, you'll have to make sure
	  that you don't overwrite your ME/TXE firmware on your flash ROM.
	help
	  The integrated gigabit ethernet controller needs a firmware file.
	  Select this if you are going to use the PCH integrated controller
	  and have the firmware.
	help
	  If you don't have an Intel Firmware Descriptor (descriptor.bin) for your
	  board, you can select this option and coreboot will build without it.
	  The resulting coreboot.rom will not contain all parts required
	  to get coreboot running on your board. You can however write only the
	  BIOS section to your board's flash ROM and keep the other sections
	  untouched. Unfortunately the current version of flashrom doesn't
	  support this yet. But there is a patch pending [1].
	  WARNING: Never write a complete coreboot.rom to your flash ROM if it
	           was built with a fake IFD. It just won't work.
	  [1] http://www.flashrom.org/pipermail/flashrom/2013-June/011083.html
	help
	  The BIOS region is typically the size of the CBFS area, and is located
	  at the end of the ROM space.
	  For an 8MB ROM with a 3MB CBFS area, this would look like:
	  0x00500000:0x007fffff
	help
	  The ME/TXE region typically starts at around 0x1000 and often fills the
	  ROM space not used by CBFS.
	  For an 8MB ROM with a 3MB CBFS area, this might look like:
	  0x00001000:0x004fffff
	help
	  The Gigabit Ethernet ROM region is used when an Intel NIC is built into
	  the Southbridge/SOC and the platform uses this device instead of an external
	  PCIe NIC.  It will be located between the ME/TXE and the BIOS region.
	  Leave this empty if you're unsure.
	help
	  The Platform region is used for platform specific data.
	  It will be located between the ME/TXE and the BIOS region.
	  Leave this empty if you're unsure.
	help
	  The Intel Firmware Descriptor supports preventing write accesses
	  from the host to the ME or TXE section in the firmware
	  descriptor. If the section is locked, it can only be overwritten
	  with an external SPI flash programmer. You will want this if you
	  want to increase security of your ROM image once you are sure
	  that the ME/TXE firmware is no longer going to change.
	  If unsure, say N.
	help
	  Reduce CBFS size to give room to the IFD blobs.
	help
	  Select the method for including the AMD Platform Initialization
	  code into coreboot.  Platform Initialization code is required for
	  all AMD processors.
	help
	  Use a binary PI package.  Generally, these will be stored in the
	  "3rdparty/blobs" directory.  For some processors, these must be obtained
	  directly from AMD Embedded Processors Group
	  (http://www.amdcom/embedded).
	help
	  Build the PI package ("AGESA") from source code in the "vendorcode"
	  directory.
	help
	  Specify where to find the AGESA header files
	  for AMD platform initialization.
	help
	  Specify the binary file to use for AMD platform initialization.
	help
	  Specify the ROM address at which to store the binary Platform
	  Initialization code.
	help
	  Enable ChromeOS specific features like the GPIO sub table in
	  the coreboot table. NOTE: Enabling this option on an unsupported
	  board will most likely break your build.
	help
	  CMOS offset for VbNv data. This value must match cmos.layout
	  in the mainboard directory, minus 14 bytes for the RTC.
	help
	  VBNV is stored in CMOS
	help
	  Vboot non-volatile storage data will be backed up from CMOS to flash
	  and restored from flash if the CMOS is invalid due to power loss.
	help
	  VBNV is stored in EC
	help
	  VBNV is stored in flash storage
	help
	  EC software sync is a mechanism where the AP helps the EC verify its
	  firmware similar to how vboot verifies the main system firmware. This
	  option selects whether depthcharge should support EC software sync.
	help
	  Whether the EC (or PD) is slow to update and needs to display a
	  screen that informs the user the update is happening.
	help
	  Whether the video option ROM has run matters on this platform.
	help
	  Whether this platform has a virtual developer switch.
	help
	  Enabling VBOOT_VERIFY_FIRMWARE will use vboot to verify the components
	  of the firmware (stages, payload, etc).
	help
	  On some boards the TPM stays powered up in S3. On those
	  boards, booting Windows will break if the TPM resume command
	  is sent during an S3 resume.
	help
	  Whether this platform has a physical recovery switch
	help
	  Whether this platform has a lid switch
	help
	  When this option is enabled, the firmware provides the ability to
	  signal the application the need for factory reset (a.k.a. wipe
	  out) of the device
	help
	 This option is needed to add ACPI regulatory domain methods
	help
	  Firmware verification happens during or at the end of bootblock.
	help
	  Firmware verification happens during or at the end of romstage.
	help
	  Enabling VBOOT2_MOCK_SECDATA will mock secdata for the firmware
	  verification to avoid access to a secdata storage (typically TPM).
	  All operations for a secdata storage will be successful. This option
	  can be used during development when a TPM is not present or broken.
	  THIS SHOULD NOT BE LEFT ON FOR PRODUCTION DEVICES.
	help
	  When this option is enabled, the Chrome OS device leaves the
	  developer mode as soon as recovery request is detected. This is
	  handy on embedded devices with limited input capabilities.
	help
	  If this is set, the verstage returns back to the calling stage instead
	  of exiting to the succeeding stage so that the verstage space can be
	  reused by the succeeding stage. This is useful if a ram space is too
	  small to fit both the verstage and the succeeding stage.
	help
	  The chipset code provides their own main() entry point.
	help
	  This option is used when there isn't enough pre-main memory
	  ram to allocate the vboot work buffer. That means vboot verification
	  is after memory init and requires main memory to back the work
	  buffer.
	help
	  Allow a platform or processor to select to be compiled using
	  the '-march=i586' option instead of the typical '-march=i686'
	help
	  Enable this in chipset's Kconfig if northbridge does not implement
	  early get_top_of_ram() call for romstage. CBMEM tables will be
	  allocated late in ramstage, after PCI devices resources are known.
	help
	  Secure OS binary file.
	help
	  Some early Cortex-A53 revisions had a hardware bug that results in
	  incorrect address calculations in rare cases. This option enables a
	  linker workaround to avoid those cases if your toolchain supports it.
	  Should be selected automatically by SoCs that are affected.
	help
	  Some mainboards, such as the Google Link, allow initializing the display
	  without the need of a binary only VGA OPROM. Enabling this option may be
	  faster, but also lacks flexibility in setting modes.
	  If unsure, say N.
	help
	  Execute VGA Option ROMs in coreboot if found. This is required
	  to enable PCI/AGP/PCI-E video cards when not using a SeaBIOS
	  payload.
	  When using a SeaBIOS payload it runs all option ROMs with much
	  more complete BIOS interrupt services available than coreboot,
	  which some option ROMs require in order to function correctly.
	  If unsure, say N when using SeaBIOS as payload, Y otherwise.
	help
	  Execute VGA Option ROMs in coreboot when resuming from S3 suspend.
	  When using a SeaBIOS payload it runs all option ROMs with much
	  more complete BIOS interrupt services available than coreboot,
	  which some option ROMs require in order to function correctly.
	  If unsure, say N when using SeaBIOS as payload, Y otherwise.
	help
	  Always load option ROMs if any are found. The decision to run
	  the ROM is still determined at runtime, but the distinction
	  between loading and not running comes into play for CHROMEOS.
	  An example where this is required is that VBT (Video BIOS Tables)
	  are needed for the kernel's display driver to know how a piece of
	  hardware is configured to be used.
	help
	  Load Option ROMs stored on PCI/PCIe/AGP devices in coreboot.
	  If disabled, only Option ROMs stored in CBFS will be executed by
	  coreboot. If you are concerned about security, you might want to
	  disable this option, but it might leave your system in a state of
	  degraded functionality.
	  When using a SeaBIOS payload it runs all option ROMs with much
	  more complete BIOS interrupt services available than coreboot,
	  which some option ROMs require in order to function correctly.
	  If unsure, say N when using SeaBIOS as payload, Y otherwise.
	help
	  If you select this option, PCI Option ROMs will be executed
	  natively on the CPU in real mode. No CPU emulation is involved,
	  so this is the fastest, but also the least secure option.
	  (only works on x86/x64 systems)
	help
	  If you select this option, the x86emu CPU emulator will be used to
	  execute PCI Option ROMs.
	  This option prevents Option ROMs from doing dirty tricks with the
	  system (such as installing SMM modules or hypervisors), but it is
	  also significantly slower than the native Option ROM initialization
	  method.
	  This is the default choice for non-x86 systems.
	help
	  Per default, YABEL only allows Option ROMs to access the PCI device
	  that they are associated with. However, this causes trouble for some
	  onboard graphics chips whose Option ROM needs to reconfigure the
	  north bridge.
	help
	  By default, YABEL aborts when the Option ROM tries to write to other
	  devices' config spaces. With this option enabled, the write doesn't
	  follow through, but the Option ROM is allowed to go on.
	  This can create issues such as hanging Option ROMs (if it depends on
	  that other register changing to the written value), so test for
	  impact before using this option.
	help
	  YABEL requires 1MB memory for its CPU emulation. This memory is
	  normally located at 16MB.
	help
	  YABEL consists of two parts: It uses x86emu for the CPU emulation and
	  additionally provides a PC system emulation that filters bad device
	  and memory access (such as PCI config space access to other devices
	  than the initialized one).
	  When choosing this option, x86emu will pass through all hardware
	  accesses to memory and I/O devices to the underlying memory and I/O
	  addresses. While this option prevents Option ROMs from doing dirty
	  tricks with the CPU (such as installing SMM modules or hypervisors),
	  they can still access all devices in the system.
	  Enable this option for a good compromise between security and speed.
	help
	  Detect and enable Common Clock on PCIe links.
	help
	  Detect and enable ASPM on PCIe links.
	help
	  Detect and enable Clock Power Management on PCIe.
	help
	  While coreboot is executing code from ROM, the coreboot resource
	  allocator has not been running yet. Hence PCI devices living behind
	  a bridge are not yet visible to the system.
	  This option enables static configuration for a single pre-defined
	  PCI bridge function on bus 0.
	help
	  Detect and enable ASPM on PCIe links.
	help
	  This config option will override the devicetree settings for
	  PCI Subsystem Vendor ID.
	help
	  This config option will override the devicetree settings for
	  PCI Subsystem Device ID.
	help
	  Select this option if you have a VGA BIOS image that you would
	  like to add to your ROM.
	  You will be able to specify the location and file name of the
	  image later.
	help
	  The path and filename of the file to use as VGA BIOS.
	help
	  The comma-separated PCI vendor and device ID that would associate
	  your VGA BIOS to your video card.
	  Example: 1106,3230
	  In the above example 1106 is the PCI vendor ID (in hex, but without
	  the "0x" prefix) and 3230 specifies the PCI device ID of the
	  video card (also in hex, without "0x" prefix).
	  Under GNU/Linux you can run `lspci -nn` to list the IDs of your PCI devices.
	help
	  Select this option if you have an Intel MBI image that you would
	  like to add to your ROM.
	  You will be able to specify the location and file name of the
	  image later.
	help
	  The path and filename of the file to use as VGA BIOS.
	help
	  This config option will enable code to override the i2c_transfer
	  routine with a (simple) software emulation of the protocol. This may
	  be useful for debugging or on platforms where a driver for the real
	  I2C controller is not (yet) available. The platform code needs to
	  provide bindings to manually toggle I2C lines.
	help
	  Set VESA/native framebuffer mode (needed for bootsplash and graphical framebuffer console)
	help
	  This option sets the resolution used for the coreboot framebuffer (and
	  bootsplash screen).
	help
	  This option keeps the framebuffer mode set after coreboot finishes
	  execution. If this option is enabled, coreboot will pass a
	  framebuffer entry in its coreboot table and the payload will need a
	  framebuffer driver. If this option is disabled, coreboot will switch
	  back to text mode before handing control to a payload.
	help
	  This option shows a graphical bootsplash screen. The graphics are
	  loaded from the CBFS file bootsplash.jpg.
	  You can either specify the location and file name of the
	  image in the 'General' section or add it manually to CBFS, using,
	  for example, cbfstool.
	help
	  X-Powers AXP902 Power Management Unit
	help
	  Make AXP209 functionality available in he bootblock.
	help
	  Select this option if your chipset driver needs to store certain
	  data in the SPI flash.
	help
	  Select this option if the SPI controller uses "atomic sequencing."
	  Atomic sequencing is when the sequence of commands is pre-programmed
	  in the SPI controller. Hardware manages the transaction instead of
	  software. This is common on x86 platforms.
	help
	  Inform system if SPI is memory-mapped or not.
	help
	  Select this option if you want SPI flash support in SMM.
	help
	  Select this option if your setup requires to avoid "fast read"s
	  from the SPI flash parts.
	help
	  Select this option if your chipset driver needs to store certain
	  data in the SPI flash and your SPI flash is made by Adesto Technologies.
	help
	  Select this option if your chipset driver needs to store certain
	  data in the SPI flash and your SPI flash is made by AMIC.
	help
	  Select this option if your chipset driver needs to store certain
	  data in the SPI flash and your SPI flash is made by Atmel.
	help
	  Select this option if your chipset driver needs to store certain
	  data in the SPI flash and your SPI flash is made by EON.
	help
	  Select this option if your chipset driver needs to store certain
	  data in the SPI flash and your SPI flash is made by Gigadevice.
	help
	  Select this option if your chipset driver needs to store certain
	  data in the SPI flash and your SPI flash is made by Macronix.
	help
	  Select this option if your chipset driver needs to store certain
	  data in the SPI flash and your SPI flash is made by Spansion.
	help
	  Select this option if your chipset driver needs to store certain
	  data in the SPI flash and your SPI flash is made by SST.
	help
	  Select this option if your chipset driver needs to store certain
	  data in the SPI flash and your SPI flash is made by ST MICRO.
	help
	  Select this option if your chipset driver needs to store certain
	  data in the SPI flash and your SPI flash is made by Winbond.
	help
	  Select this option if your SPI flash supports the fast read dual-
	  output command (opcode 0x3b) where the opcode and address are sent
	  to the chip on MOSI and data is received on both MOSI and MISO.
	help
	  Enable support for flash based event logging.
	help
	  Offset into the flash chip for the ELOG block.
	  This should be allocated in the FMAP.
	help
	  This should be a multiple of flash block size.
	  Default is 4K.
	help
	 This option will have ELOG store a copy of the flash event log
	 in a CBMEM region and export that address in SMBIOS to the OS.
	 This is useful if the ELOG location is not in memory mapped flash,
	 but it means that events added at runtime via the SMI handler
	 will not be reflected in the CBMEM copy of the log.
	help
	  This interface is compatible with the linux kernel driver
	  available with CONFIG_GOOGLE_GSMI and can be used to write
	  kernel reset/shutdown messages to the event log.
	help
	  Store a monotonic boot number in CMOS and provide an interface
	  to read the current value and increment the counter.  This boot
	  counter will be logged as part of the System Boot event.
	help
	  This value must be greater than 16 bytes so as not to interfere
	  with the standard RTC region.  Requires 8 bytes.
	help
	  This option allows you to use a so-called USB EHCI Debug device
	  (such as the Ajays NET20DC, AMIDebug RX, or a system using the
	  Linux "EHCI Debug Device gadget" driver found in recent kernel)
	  to retrieve the coreboot debug messages (instead, or in addition
	  to, a serial port).
	  This feature is NOT supported on all chipsets in coreboot!
	  It also requires a USB2 controller which supports the EHCI
	  Debug Port capability.
	  See http://www.coreboot.org/EHCI_Debug_Port for an up-to-date list
	  of supported controllers.
	  If unsure, say N.
	help
	   Configuring USB controllers in system-agent binary may cause
	   problems to usbdebug. Disabling this option delays usbdebug to
	   be setup on entry to ramstage.
	   If unsure, say Y.
	help
	   Some boards have multiple EHCI controllers with possibly only
	   one having the Debug Port capability on an external USB port.
	   Mapping of this index to PCI device functions is southbridge
	   specific and mainboard level Kconfig should already provide
	   a working default value here.
	help
	  Selects which physical USB port usbdebug dongle is connected to.
	  Setting of 0 means to scan possible ports starting from 1.
	  Intel platforms have hardwired the debug port location and this
	  setting makes no difference there.
	  Hence, if you select the correct port here, you can speed up
	  your boot time. Which USB port number refers to which actual
	  port on your mainboard (potentially also USB pin headers on
	  your mainboard) is highly board-specific, and you'll likely
	  have to find out by trial-and-error.
	help
	  Use this to configure the USB hub on BeagleBone board.
	help
	  Use this with BeagleBone Black.
	help
	  Use this with FT232H usb-to-uart. Configuration is hard-coded
	  to use 115200, 8n1, no flow control.
	help
	  The presence of digitizer is inferred from model number stored in
	  AT24RF chip.
	help
	  The digitizer is assumed to be present.
	help
	  The digitizer is assumed to be absent.
	help
	  This option enables GIC support, the ARM generic interrupt controller.
	help
	  Support for Oxford OXPCIe952 serial port PCIe cards.
	  Currently only devices with the vendor ID 0x1415 and device ID
	  0xc158 or 0xc11b will work.
	help
	  Does the code require the Intel Firmware Support Package?
	help
	  Select this option to add an Intel FSP binary to
	  the resulting coreboot image.
	  Note: Without this binary, coreboot builds relying on the FSP
	  will not boot
	help
	  The length in bytes of the microcode update region.
	help
	  The location (base address) in CBFS that contains the microcode update
	  binary.
	help
	  The path and filename of the Intel FSP binary for this platform.
	help
	  8 ASCII character byte signature string that will help match the FSP
	  binary to a supported hardware configuration.
	help
	  The location in CBFS that the FSP is located. This must match the
	  value that is set in the FSP binary.  If the FSP needs to be moved,
	  rebase the FSP with Intel's BCT (tool).
	help
	  Display the user specified product data prior to memory
	  initialization.
	help
	  If this FSP uses UPD/VPD data regions, select this in the chipset
	  Kconfig.
	help
	  The chipset can select this to use a generic cache_as_ram.inc file
	  that should be good for all FSP based platforms.
	help
	  Select this option to add an Intel FSP binary to
	  the resulting coreboot image.
	  Note: Without this binary, coreboot builds relying on the FSP
	  will not boot
	help
	  The path and filename of the Intel FSP binary for this platform.
	help
	  The location in CBFS that the FSP is located. This must match the
	  value that is set in the FSP binary.  If the FSP needs to be moved,
	  rebase the FSP with Intel's BCT (tool).
	help
	  Enabling this feature will force the MRC data to be cached in NV
	  storage to be used for speeding up boot time on future reboots
	  and/or power cycles.
	help
	  Enabling this feature will cause MRC data to be cached in NV storage.
	  This can either be used for fast boot, or just because the FSP wants
	  it to be saved.
	help
	  Use the region "RW_MRC_CACHE" in FMAP instead of "mrc.cache" in CBFS.
	  You must define a region in your FMAP named "RW_MRC_CACHE".
	help
	  This is the amount of space in NV storage that is reserved for the
	  fast boot data cache storage.
	  WARNING: Because this area will be erased and re-written, the size
	  should be a full sector of the flash ROM chip and nothing else should
	  be included in CBFS in any sector that the fast boot cache data is in.
	help
	  This is used to calculate the offset of the MRC data cache in NV
	  Storage for fast boot.  If in doubt, leave this set to the default
	  which sets the virtual size equal to the ROM size.
	  Example: Cougar Canyon 2 has two 8 MB SPI ROMs.  When the SPI ROMs are
	  loaded with a 4 MB coreboot image, the virtual ROM size is 8 MB.  When
	  the SPI ROMs are loaded with an 8 MB coreboot image, the virtual ROM
	  size is 16 MB.
	help
	  This is the size of the cachable area that is passed into the FSP in
	  the early initialization.  Typically this should be the size of the CBFS
	  area, but the size must be a power of 2 whereas the CBFS size does not
	  have this limitation.
	help
	  The chipset can select this to use a generic cache_as_ram.inc file
	  that should be good for all FSP based platforms.
	help
	  If this FSP uses UPD/VPD data regions, select this in the chipset Kconfig.
	help
	  Include FSP 2.0 wrappers and functionality
	help
	  helper functions for intel display port operations
	help
	  helper functions for intel DDI operations
	help
	  X-Powers AXP902 Power Management Unit
	help
	  Make AXP209 functionality available in he bootblock.
	help
	  TI TPS65090
	help
	  Maxim MAX77686 power regulator
	help
	  Parade PS8640 MIPI DSI to eDP Converter
	help
	  Parade ps8625 display port to lvds bridge
	help
	   VGA driver for qemu emulated vga cards supporting
	   the bochs dispi interface.  This includes
	   standard vga, vmware svga and qxl.  The default
	   vga (cirrus) is *not* supported, so you have to
	   pick another one explicitly via 'qemu -vga $card'.
	help
	It sets PCI class to IDE compatible native mode, allowing
	SeaBIOS, FILO etc... to boot from it.
	help
	  Enable support for Realtek RTD2132 DisplayPort to LVDS bridge chip.
	help
	  Enable this option to initialize PS/2 keyboards found connected
	  to the PS/2 port.
	  Some payloads (eg, filo) require this option.  Other payloads
	  (eg, GRUB 2, SeaBIOS, Linux) do not require it.
	  Initializing a PS/2 keyboard can take several hundred milliseconds.
	  If you know you will only use a payload which does not require
	  this option, then you can say N here to speed up boot time.
	  Otherwise say Y.
	help
	  Board has TPM support
	help
	  Enable this option to enable LPC TPM support in coreboot.
	  If unsure, say N.
	help
	  This can be used to adjust the TPM memory base address.
	  The default is specified by the TCG PC Client Specific TPM
	  Interface Specification 1.2 and should not be changed unless
	  the TPM being used does not conform to TPM TIS 1.2.
	help
	  This can be used to specify a PIRQ to use instead of SERIRQ,
	  which is needed for SPI TPM interrupt support on x86.
	help
	  What to do if TPM init failed. If true, force a hard reset,
	  otherwise just log error message to console.
	help
	  Skip TPM init on normal boot. Useful if payload does TPM init.
	help
	  Deactivate TPM by issuing deactivate command.
	help
	  Enable this option to enable TPM support in coreboot.
	  If unsure, say N.
	help
	  Use console during the bootblock if supported
	help
	  When selected only the BSP CPU will output to early console.
	  Console drivers have unpredictable behaviour if multiple threads
	  attempt to share the same resources without a spinlock.
	  If unsure, say Y.
	help
	  Send coreboot debug output to a serial port.
	  The type of serial port driver selected based on your configuration is
	  shown on the following menu line. Supporting multiple different types
	  of UARTs in one build is not supported.
	help
	  Select an I/O port to use for serial console:
	    0 = 0x3f8, 1 = 0x2f8, 2 = 0x3e8, 3 = 0x2e8
	help
	  Map the COM port number to the respective I/O port.
comment "Serial port base address = 0x3f8"
depends on UART_FOR_CONSOLE = 0
comment "Serial port base address = 0x2f8"
depends on UART_FOR_CONSOLE = 1
comment "Serial port base address = 0x3e8"
depends on UART_FOR_CONSOLE = 2
comment "Serial port base address = 0x2e8"
depends on UART_FOR_CONSOLE = 3
	help
	  Set serial port Baud rate to 921600.
	help
	  Set serial port Baud rate to 460800.
	help
	  Set serial port Baud rate to 230400.
	help
	  Set serial port Baud rate to 115200.
	help
	  Set serial port Baud rate to 57600.
	help
	  Set serial port Baud rate to 38400.
	help
	  Set serial port Baud rate to 19200.
	help
	  Set serial port Baud rate to 9600.
	help
	  Map the Baud rates to an integer.
	help
	  Send coreboot debug output through speaker
	help
	  Send coreboot debug output to USB.
	  Configuration for USB hardware is under menu Generic Drivers.
	help
	  If not selected, the last adapter found will be used.
	help
	  Send coreboot debug output to a Ethernet console, it works
	  same way as Linux netconsole, packets are received to UDP
	  port 6666 on IP/MAC specified with options bellow.
	  Use following netcat command: nc -u -l -p 6666
	help
	  Type in either MAC address of logging system or MAC address
	  of the router.
	help
	  This is IP address of the system running for example
	  netcat command to dump the packets.
	help
	  This is the IP of the coreboot system
	help
	  This is the IO port address for the IO port
	  on the card, please select some non-conflicting region,
	  32 bytes of IO spaces will be used (and align on 32 bytes
	  boundary, qemu needs broader align)
	help
	  Enable this to save the console output in a CBMEM buffer. This would
	  allow to see coreboot console output from Linux space.
	help
	  Space allocated for console output storage in CBMEM. The default
	  value (128K or 0x20000 bytes) is large enough to accommodate
	  even the BIOS_SPEW level.
	help
	  Enable this to have CBMEM console buffer contents dumped on the
	  serial output in case serial console is disabled and the device
	  resets itself while trying to boot the payload.
	help
	  Send coreboot debug output to QEMU's isa-debugcon device:
	  qemu-system-x86_64 \
	    -chardev file,id=debugcon,path=/dir/file.log \
	    -device isa-debugcon,iobase=0x402,chardev=debugcon
	help
	  Enable support for the debug console on the Dediprog EM100Pro.
	  This is currently working only in ramstage due to how the spi
	  drivers are written.
	help
	  Way too many details.
	help
	  Debug-level messages.
	help
	  Informational messages.
	help
	  Normal but significant conditions.
	help
	  Warning conditions.
	help
	  Error conditions.
	help
	  Critical conditions.
	help
	  Action must be taken immediately.
	help
	  System is unusable.
	help
	  Map the log level config names to an integer.
	help
	  If enabled, coreboot will store post codes in CMOS and switch between
	  two offsets on each boot so the last post code in the previous boot
	  can be retrieved.  This uses 3 bytes of CMOS.
	help
	  If CMOS_POST is enabled then an offset into CMOS must be provided.
	  If CONFIG_HAVE_OPTION_TABLE is enabled then it will use the value
	  defined in the mainboard option table.
	help
	  This will enable extra logging of work that happens between post
	  codes into CMOS for debug.  This uses an additional 8 bytes of CMOS.
	help
	  If enabled, coreboot will additionally print POST codes (which are
	  usually displayed using a so-called "POST card" ISA/PCI/PCI-E
	  device) on the debug console.
	help
	  If enabled, POST codes will be written to an IO port.
	help
	  POST codes on x86 are typically written to the LPC bus on port
	  0x80. However, it may be desirable to change the port number
	  depending on the presence of coprocessors/microcontrollers or if the
	  platform does not support IO in the conventional x86 manner.
	help
	  Some chipsets require that the routing for the port 80h POST
	  code be configured before any POST codes are sent out.
	  This can be done in the boot block, but there are a couple of
	  POST codes that go out before the chipset's bootblock initialization
	  can happen.  This option suppresses those POST codes.
	help
	  This option indicates that when a system resumes it takes the
	  same path as a regular boot. e.g. an x86 system runs from the
	  reset vector at 0xfffffff0 on both resume and warm/cold boot.
	help
	  This variable specifies whether a given board has a hard_reset
	  function, no matter if it's provided by board code or chipset code.
	help
	  This should be enabled on certain plaforms, such as the AMD
	  SR565x, that cannot handle concurrent CBFS accesses from
	  multiple APs during early startup.
	help
	 The board/chipset provides a monotonic timer.
	help
	 The board/chipset uses a generic udelay function utilizing the
	 monotonic timer.
	help
	  Provide a timer queue for performing time-based callbacks.
	help
	  Cooperative multitasking allows callbacks to be multiplexed on the
	  main thread of ramstage. With this enabled it allows for multiple
	  execution paths to take place when they have udelay() calls within
	  their code.
	help
	  How many execution threads to cooperatively multitask with.
	help
	  This variable specifies whether a given board has a cmos.layout
	  file containing NVRAM/CMOS bit definitions.
	  It defaults to 'n' but can be selected in mainboard/*/Kconfig.
	help
	  Build board-specific VGA code.
	help
	  Enable Unified Memory Architecture for graphics.
	help
	  This variable specifies whether a given board has ACPI table support.
	  It is usually set in mainboard/*/Kconfig.
	help
	  This variable specifies whether a given board has MP table support.
	  It is usually set in mainboard/*/Kconfig.
	  Whether or not the MP table is actually generated by coreboot
	  is configurable by the user via GENERATE_MP_TABLE.
	help
	  This variable specifies whether a given board has PIRQ table support.
	  It is usually set in mainboard/*/Kconfig.
	  Whether or not the PIRQ table is actually generated by coreboot
	  is configurable by the user via GENERATE_PIRQ_TABLE.
	help
	  This variable specifies the number of PIRQ interrupt links which are
	  routable. On most chipsets, this is 4, INTA through INTD. Some
	  chipsets offer more than four links, commonly up to INTH. They may
	  also have a separate link for ATA or IOAPIC interrupts. When the PIRQ
	  table specifies links greater than 4, pirq_route_irqs will not
	  function properly, unless this variable is correctly set.
	help
	  Build support for NHLT (non HD Audio) ACPI table generation.
	help
	  The amount of memory to reserve for the coreboot tables in
	  cbmem.
	help
	  Generate an MP table (conforming to the Intel MultiProcessor
	  specification 1.4) for this board.
	  If unsure, say Y.
	help
	  Generate a PIRQ table for this board.
	  If unsure, say Y.
	help
	  Generate SMBIOS tables for this board.
	  If unsure, say Y.
	help
	  The Serial Number to store in SMBIOS structures.
	help
	  The Version Number to store in SMBIOS structures.
	help
	  Override the default Manufacturer stored in SMBIOS structures.
	help
	  Override the default Product name stored in SMBIOS structures.
	help
	  Select this option if you want to create an "empty" coreboot
	  ROM image for a certain mainboard, i.e. a coreboot ROM image
	  which does not yet contain a payload.
	  For such an image to be useful, you have to use 'cbfstool'
	  to add a payload to the ROM image later.
	help
	  Select this option if you have a payload image (an ELF file)
	  which coreboot should run as soon as the basic hardware
	  initialization is completed.
	  You will be able to specify the location and file name of the
	  payload image later.
	help
	  Select this option if you want to build a coreboot image
	  with a SeaBIOS payload. If you don't know what this is
	  about, just leave it enabled.
	  See http://coreboot.org/Payloads for more information.
	help
	  Select this option if you have a Linux bzImage which coreboot
	  should run as soon as the basic hardware initialization
	  is completed.
	  You will be able to specify the location and file name of the
	  payload image later.
	help
	  Select this option if you want to build a coreboot image
	  with a depthcharge payload.
	  See http://coreboot.org/Payloads for more information.
	help
	  Select this option if you want to build a coreboot image
	  with a U-Boot payload.
	  See http://coreboot.org/Payloads and U-Boot's documentation
	  at http://git.denx.de/?p=u-boot.git;a=blob;f=doc/README.x86
	  for more information.
	help
	  Select this option if you want to build a coreboot image
	  with a GRUB2 payload. If you don't know what this is
	  about, just leave it enabled.
	  See http://coreboot.org/Payloads for more information.
	help
	  Select this option if you want to build a coreboot image
	  with a FILO payload. If you don't know what this is
	  about, just leave it enabled.
	  See http://coreboot.org/Payloads for more information.
	help
	  Select this option if you want to build a coreboot image
	  with a Tiano Core payload. If you don't know what this is
	  about, just leave it enabled.
	  See http://coreboot.org/Payloads for more information.
	help
	  Select this option if you have a PXE ROM image that you would
	  like to add to your ROM.
	help
	  Select this option to fetch and build a ROM from the iPXE project.
	help
	  iPXE uses a rolling release with no stable version, for
	  reproducibility, use the last commit of a given month as the
	  'stable' version.
	  This is iPXE from the end of February, 2016.
	help
	  Newest iPXE version.
	help
	  The path and filename of the file to use as PXE ROM.
	help
	  The comma-separated PCI vendor and device ID that would associate
	  your PXE ROM to your network card.
	  Example: 10ec,8168
	  In the above example 10ec is the PCI vendor ID (in hex, but without
	  the "0x" prefix) and 8168 specifies the PCI device ID of the
	  network card (also in hex, without "0x" prefix).
	  Under GNU/Linux you can run `lspci -nn` to list the IDs of your PCI devices.
	help
	  Stable SeaBIOS version
	help
	  Newest SeaBIOS version
	help
	  Select this option if you have a specific commit or branch
	  that you want to use as the revision from which to
	  build SeaBIOS.
	  You will be able to specify the name of a branch or a commit id
	  later.
	help
	   The commit's SHA-1 or branch name of the revision to use.
	help
	  Some PS/2 keyboard controllers don't respond to commands immediately
	  after powering on. This specifies how long SeaBIOS will wait for the
	  keyboard controller to become ready before giving up.
	help
	  Allow hardware init to run in parallel with optionrom execution.
	  This can reduce boot time, but can cause some timing
	  variations during option ROM code execution. It is not
	  known if all option ROMs will behave properly with this option.
	help
	  Coreboot can initialize the GPU of some mainboards.
	  After initializing the GPU, the information about it can be passed to the payload.
	  Provide an option rom that implements this legacy VGA BIOS compatibility requirement.
	help
	  This option allows a platform to set Kconfig options for a basic
	  SeaBIOS payload.  In general, if the option is used, the default
	  would be "$(top)/src/mainboard/$(MAINBOARDDIR)/config_seabios"
	help
	  The path and filename of the bzImage kernel to use as payload.
	help
	  A command line to add to the Linux kernel.
	help
	  An initrd image to add to the Linux kernel.
	help
	  Stable U-Boot version
	help
	  Newest U-Boot version
	help
	  This option allows a platform to set Kconfig options for a basic
	  U-Boot payload.  In general, if the option is used, the default
	  would be "$(top)/src/mainboard/$(MAINBOARDDIR)/config_uboot"
	  for a config stored in the coreboot mainboard directory, or
	  "$(project_dir)/configs/coreboot-x86_defconfig" to use a config
	  from the U-Boot config directory
	help
	  Newest GRUB2 version
	help
	  Space-separated list of additional modules to include. Few common
	  ones:
	  * bsd for *BSD
	  * png/jpg for PNG/JPG images
	  * gfxmenu for graphical menus (you'll need a theme as well)
	  * gfxterm_background for setting background
	help
	  Stable FILO version
	help
	  Newest FILO version
	help
	  The result of a corebootPkg build
	help
	  The path and filename of the ELF executable file to use as payload.
	help
	  In order to reduce the size payloads take up in the ROM chip
	  coreboot can compress them using the LZMA algorithm.
	help
	  Additional cbfstool options for the payload
	help
	  Add the payload to cbfs as a flat binary type instead of as an
	  elf payload
	help
	  coreinfo can be loaded as a secondary payload under SeaBIOS, GRUB,
	  or any other payload that can load additional payloads.
	help
	  Memtest86+ can be loaded as a secondary payload under SeaBIOS, GRUB,
	  or any other payload that can load additional payloads.
	help
	  Stable Memtest86+ version.
	  For reproducible builds, this option must be selected.
	help
	  Newest Memtest86+ version.
	  This option will fetch the newest version of the Memtest86+ code,
	  updating as new changes are committed.  This makes the build
	  non-reproducible, as it can fetch different code each time.
	help
	  nvramcui can be loaded as a secondary payload under SeaBIOS, GRUB,
	  or any other payload that can load additional payloads.
	help
	  If enabled, you will be able to set breakpoints for gdb debugging.
	  See src/arch/x86/lib/c_start.S for details.
	help
	  If enabled, coreboot will wait for a GDB connection.
	help
	  If enabled, coreboot will call hlt() on a BUG() or failed ASSERT().
	help
	  This option enables additional CBFS related debug messages.
	help
	  This option enables additional RAM init related debug messages.
	  It is recommended to enable this when debugging issues on your
	  board which might be RAM init related.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  This option enables additional CAR related debug messages.
	help
	  If unsure, say N.
	help
	  This option enables additional SMBus (and SPD) debug messages.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  This option enables additional SMI related debug messages.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  This option enables additional SMM handler relocation related
	  debug messages.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  This option enables additional malloc related debug messages.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  This option enables additional ACPI related debug messages.
	  Note: This option will slightly increase the size of the coreboot image.
	  If unsure, say N.
	help
	  This option enables additional x86emu related debug messages.
	  Note: This option will increase the time to emulate a ROM.
	  If unsure, say N.
	help
	  This option enables additional x86emu related debug messages.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  Print information about JMP and RETF opcodes from x86emu.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  Print _all_ opcodes that are executed by x86emu.
	  WARNING: This will produce a LOT of output and take a long time.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  Print Plug And Play accesses made by option ROMs.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  Print Disk I/O related messages.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  Print messages related to POST Memory Manager (PMM).
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  Print messages related to VESA BIOS Extension (VBE) functions.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  Let INT10 (i.e. character output) calls print messages to debug output.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  Print messages related to interrupt handling.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  Print messages related to accesses to certain areas of the virtual
	  memory (e.g. BDA (BIOS Data Area) or interrupt vectors)
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  Print memory accesses made by option ROM.
	  Note: This also includes accesses to fetch instructions.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  Print I/O accesses made by option ROM.
	  Note: This option will increase the size of the coreboot image.
	  If unsure, say N.
	help
	  Print timing information needed by i915tool.
	  If unsure, say N.
	help
	  This option enables additional TPM related debug messages.
	help
	  This option enables additional SPI flash related debug messages.
	help
	  This option enables additional USB 2.0 debug dongle related messages.
	  Select this to debug the connection of usbdebug dongle. Note that
	  you need some other working console to receive the messages.
	help
	  Enable verbose logging for Intel Management Engine driver that
	  is present on Intel 6-series chipsets.
	help
	  If enabled, every function will print information to console once
	  the function is entered. The syntax is ~0xaaaabbbb(0xccccdddd)
	  the 0xaaaabbbb is the actual function and 0xccccdddd is EIP
	  of calling function. Please note some printk related functions
	  are omitted from trace to have good looking console dumps.
	help
	  If enabled, the code coverage hooks in coreboot will output some
	  information about the coverage data that is dumped.
	help
	  Select to Fail the build if a IASL generates a warning.
	  This will be defaulted to disabled for the platforms that
	  currently fail.  This allows the REST of the platforms to
	  have this check enabled while we're working to get those
	  boards fixed.
	  DO NOT ADD TO ANY ADDITIONAL PLATFORMS INSTEAD OF FIXING
	  THE ASL.
	help
	  Select when the board has a power button which can optionally be
	  disabled by the user.
	help
	  Select when the board has a power button which can optionally be
	  enabled by the user, e.g. when the board ships with a jumper over
	  the power switch contacts.
	help
	  Select when the board requires that the power button is always
	  enabled.
	help
	  Select when the board requires that the power button is always
	  disabled, e.g. when it has been hardwired to ground.
	help
	  Internal option that controls ENABLE_POWER_BUTTON visibility.
	help
	  Internal option that controls whether we compile in register scripts.
	help
	  Internal option that sets the maximum number of bootblock executions allowed
	  with the normal image enabled before assuming the normal image is defective
	  and switching to the fallback image.
	help
	  This is the part of the ROM actually managed by CBFS.  Set it to be
	  equal to the full rom size if that hasn't been overridden by the
	  chipset or mainboard.
	help
	  Control debugging of the boot state machine.  When selected displays
	  the state boundaries in ramstage.
